[
{
"text": "db.mycol.find({$and:[{\"by\":\"tutorials point\"},{\"title\": \"MongoDB Overview\"}]}).pretty()",
"label": 0
},
{
"text": "db.collection('users').findOne({\"\"username\"\": {\"\"$ne\"\": null}, \"\"password\"\": {\"\"$ne\"\": null}})",
"label": 1
},
{
"text": "db.Document.find({ \"type\": { \"$gte\": \"\" } })",
"label": 1
},
{
"text": "db.Document.find({ \"type\": { \"$ne: 0 \"\" } })",
"label": 1
},
{
"text": "db.books.insert({ title: 'The Hobbit', author: 'J.R.R. Tolkien' })",
"label": 0
},
{
"text": "db.books.find({ title: 'The Hobbit' })",
"label": 0
},
{
"text": "db.logins.find({ username: 'tolkien', password: 'hobbit' })",
"label": 0
},
{
"text": "db.logins.find({ username: { $ne: 1 }, password: { $ne: 1 } })",
"label": 1
},
{
"text": "db.doc.find({ username: 'tolkien', $or: [ {}, { 'a': 'a', password: '' } ], $comment: 'successful MongoDB injection' })",
"label": 1
},
{
"text": "db.user.save({\"_id\" : 1234, \"name\" : {\"first\": \"foo\", \"last\" : \"bar\"}})",
"label": 0
},
{
"text": "db.user.find({\"_id\" : 1234 })",
"label": 0
},
{
"text": "db.user.find({\"name.first\" : \"foo\"})",
"label": 0
},
{
"text": "db.getMongo().getDBNames()",
"label": 0
},
{
"text": "db.members.find({login:\"admin\", pass: {$ne: \"parol1\"} } )",
"label": 1
},
{
"text": "db.books.insert({ title: \"\"As you like it\"\", Author: \"\"William Shakespeare\"\"})\"",
"label": 0
},
{
"text": "db.foo.find( { $or : [ { a : 1 } , { b : 2 } ] } )",
"label": 0
},
{
"text": "db.foo.find( { $or : [ { a : 1 } , { b : 2 }, { c : /.*/ } ] } )",
"label": 1
},
{
"text": "db.myCollection.find( { $where: \"this.a > 3\" } );",
"label": 0
},
{
"text": "db.collection.find( { '$where' : 'function() { return artist == \"Weezer\"; }}' )",
"label": 1
},
{
"text": "db.collection.find ( '$where' : 'function() {var len = artist.length;for (int i=2; i<len; i++) {if (len % I == 0) return false;}return true; }')",
"label": 1
},
{
"text": "db.bands.find()",
"label": 0
},
{
"text": "db.products.find( { qty: { $gt: 25 } } )",
"label": 0
},
{
"text": "db.test.save( { a: 1 } )",
"label": 0
},
{
"text": "db.movie.insert({\"name\":\"tutorials point\"})",
"label": 0
},
{
"text": "db.dropDatabase()",
"label": 0
},
{
"text": "db.createCollection(\"\"mycol\"\", { capped : true, autoIndexId : true, size : 6142800, max : 10000 } )\"",
"label": 0
},
{
"text": "db.mycollection.drop()",
"label": 0
},
{
"text": "db.mycol.insert({ _id: ObjectId(7df78ad8902c), title: 'MongoDB Overview', description: 'MongoDB is no sql database', by: 'tutorials point', url: 'http://www.tutorialspoint.com', tags: ['mongodb', 'database', 'NoSQL'], likes: 100})\"",
"label": 0
},
{
"text": "db.mycol.find().pretty()",
"label": 0
},
{
"text": "db.mycol.find({$or:[{\"by\":{\"$ne\": null}},{\"title\": \"MongoDB Overview\"}]}).pretty()",
"label": 1
},
{
"text": "db.mycol.find({$or:[{\"by\":\"tutorials point\"},{\"title\": \"MongoDB Overview\"}]}).pretty()",
"label": 0
},
{
"text": "db.mycol.update({'title':'MongoDB Overview'},{$set:{'title':'New MongoDB Tutorial'}})",
"label": 0
},
{
"text": "db.mycol.remove({'title':'MongoDB Overview'})",
"label": 0
},
{
"text": "db.mycol.find({},{\"title\":1,_id:0})",
"label": 0
},
{
"text": "db.students.find( { grades: { $elemMatch: {mean: { $gt: 70 },grade: { $gt:90 }} } },{ \"\"grades.$\"\": 1 } )\"",
"label": 0
},
{
"text": "db.students.find({ $or:[{\"\"by\"\":{\"\"$ne\"\": null}}, {grades: { $elemMatch: { mean: { $gt: 70 }, grade: { $gt:90 } } } }]}, { \"\"grades.$\"\": 1 } )\"",
"label": 1
},
{
"text": "db.createCollection(\"mycol\", { capped : true, autoIndexId : true,size : 6142800, max : 10000 } )",
"label": 0
},
{
"text": "db.collection('users').findOne({ \"username\": {\"$ne\": null},\"password\": {\"$ne\": null}})",
"label": 1
},
{
"text": "db.mycol.find({$or:[{\"by\":{\"$ne\": null}},{\"title\": \"MongoDB Overview\"}]})",
"label": 1
},
{
"text": "db.students.find( { grades: { $elemMatch: { mean: { $gt: 70 }, grade: { $gt:90 } } } }, { \"grades.$\": 1 } )",
"label": 0
},
{
"text": "db.students.find({ $or:[{\"by\":{\"$ne\": null}}, {grades: { $elemMatch: { mean: { $gt: 70 }, grade: { $gt:90 }} } }]}, { \"grades.$\": 1 } )",
"label": 1
},
{
"text": "db.users.find({\"username\": {\"$gt\": \"\"},\"password\": {\"$gt\": \"\"})",
"label": 1
},
{
"text": "db.restaurant.updateMany({\"username\": {\"$ne\": null},,{ $set: { \"Review\" : true } })",
"label": 1
},
{
"text": "var query = { $where: \"this.canceledOrders > \" + req.body.canceledOrders } db.collection('users').find(query).each(function(err, doc) { console.log(doc); })",
"label": 1
},
{
"text": "db.articles.find({\"$where\": \"this.hidden == false && this.category == '\"+category+\"'\" })",
"label": 0
},
{
"text": "db.articles.find({\"$where\": \"this.hidden == false && this.category == ' '; return '' == ' ' })",
"label": 1
},
{
"text": "db.users.find({username:'dummy'});return{username:tojson(db.getName()),password:2}}//,password:'dummy'})",
"label": 1
},
{
"text": "db.users.find({username:'dummy'});return{username:tojson(db.getCollectionName()),password:2}}//',password:dummy})",
"label": 1
},
{
"text": "db.users.save({msg: '1';sleep(10000);var%20foo='bar'})",
"label": 1
},
{
"text": "db.users.save({msg:1';var%20d%20=%20new%20Date();%20var%20cd%20=%20null;%20do%20{%20cd%20=%20new%20Date();%20}%20while(cd-d%20<%2010000);var%20foo='bar})",
"label": 1
},
{
"text": "db.library.find({ISBN: '0763754891' || '1' =='1' })",
"label": 1
},
{
"text": "db.collection.find({$where: 'orders' > '';return true;var foo='bar'}",
"label": 1
},
{
"text": "db.collection.find({$where: 'orders' > '0;while(true);var foo='bar'}",
"label": 1
},
{
"text": "db.admins.find({user: 'rafid', $and: [passcode: ''validation_key: '' ]})",
"label": 0
},
{
"text": "db.admins.find({user: 'rafid', $or:[{},{a: 'a',$and: [passcode: '',validation_key: '']}, $comment: 'haha' ]})",
"label": 1
},
{
"text": "db.library.find{by: 'George R. R. Martin',title: 'Game of Thrones'}",
"label": 0
},
{
"text": "db.library.find({by: 'George R. R. Martin',title: 'Game of Thrones'});db.runCommand('db.dropDatabase()');({'var foo='bar'})",
"label": 1
},
{
"text": "db.users.find({username: 'rafid'});db.users.findAndModify({ query: { username:'rafid'}, update:{$set:{'a:a', password: 'dragonball'}},$comment: 'successful MongoDB injection'})",
"label": 1
},
{
"text": "db.logins.find({ username: { $ne: 0 }, password: { $ne: 0 } })",
"label": 1
},
{
"text": "db.logins.find({ username: { $gt: 0 }, password: { $gt: \"\" } })",
"label": 1
},
{
"text": "db.logins.find({ username: { $gte: \"\" }, password: { $gte: \"\" } })",
"label": 1
},
{
"text": "db.logins.find({ username: { $lt: \"zzzzzzzzzzzzzzzzzzzzzzzzzz\" }, password: { $lt: \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\" } })",
"label": 1
},
{
"text": "db.logins.find({ username: { $lte: \"zzzzzzzzzzzzzzzzzzzzzzzzzz\" }, password: { $lte: \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\" } })",
"label": 1
},
{
"text": "db.logins.find({ username: { $nin: [0] }, password: { $nin: [0] } })",
"label": 1
},
{
"text": "db.collection('users').findOne({ \"username\": \"dummy\", $or: [ {}, { password: \"\" } ]})",
"label": 1
},
{
"text": "db.collection('users').findOne({ \"username\": \"admin\", \"Password\" : {$or: [ {}, \"abcd\" ] }})",
"label": 1
},
{
"text": "db.collection('users').findOne({\"username\": \"admin\", \"Password\" : {$and: [{1==1}] }})",
"label": 1
},
{
"text": "db.collection('users').find({ \"username\": {$exists: true}, \"Password\" : {$exists: true}})",
"label": 1
},
{
"text": "db.collection('users').find({\"username\": {$not: \"\"}, \"Password\" : {$not: \"\"}})",
"label": 1
},
{
"text": "db.collection('users').find({ \"username\": {$not: null},\"Password\" : {$not: null}})",
"label": 1
},
{
"text": "db.collection('users').find({\"username\": {$nor: [{0==1}, {1==2}]},\"Password\" : {$nor: [{0==1},{1==2}]}})",
"label": 1
},
{
"text": "db.collection.find({$where: name == ''; return '' == ''})",
"label": 1
},
{
"text": "db.collection('users').find({\"username\": {$type: \"string\"},\"Password\" : {$type: \"string\"}})",
"label": 1
},
{
"text": "db.collections.find({$where: quantity > '';sleep(50000);;var foo='bar'})",
"label": 1
},
{
"text": "db.collection.find({$where: name == '';return(db.getCollectionNames().length == 2);var foo='bar')}",
"label": 1
},
{
"text": "db.users.find({username: 'dummy'});db.users.drop();db.users.insert({username:'rafid', password:'rafid'})",
"label": 1
},
{
"text": "db.users.find({name: 'rafid'});db.users.remove(.*);db.users.insert({ name: 'dummy'})",
"label": 1
},
{
"text": "db.users.find({name: 'dummy', $where: 1==1}, { name: '1', password: '1'})",
"label": 1
},
{
"text": "db.users.find({username: 'dummy'});return{something:1,something:2}}//', password: 'dummy'})",
"label": 1
},
{
"text": "db.users.find({username: /.*/, password: /.*/})",
"label": 1
},
{
"text": "db.users.find({username: {$nin: [/./]}, password: {$nin: [/./]}})",
"label": 1
},
{
"text": "db.users.find({username: {$in: [/.*/]}, password: {$in: [/.*/]}})",
"label": 1
},
{
"text": "db.users.find({Username: {$in:[/.a*]}, password: {$nin:[/./]}})",
"label": 1
},
{
"text": "db.users.find({Username: { $regex: /.*/i }password: { $regex: /.*/i }})",
"label": 1
},
{
"text": "db.users.find({Username: { $regex: /^a/ }password: { $regex: /.*/ }})",
"label": 1
},
{
"text": "db.collection.find({\"by\" : \"Tutorials point\"})",
"label": 0
},
{
"text": "db.collection.find({\"likes\" : {$lt:50}})",
"label": 0
},
{
"text": "db.collection.find({\"likes\" : {$lte:50}})",
"label": 0
},
{
"text": "db.collection.find({\"likes\" : {$gt:50}})",
"label": 0
},
{
"text": "db.collection.find({\"likes\" : {$gte:50}})",
"label": 0
},
{
"text": "db.collection.find({\"likes\" : {$ne:5}, \"title\" : \"hex\"})",
"label": 0
},
{
"text": "db.collection.find({$and: [{\"by\": \"tut\"}, {\"likes\" : {$gt:100}}]})",
"label": 0
},
{
"text": "db.collection.find({$and: [{\"by\": \"tut\"}, {\"likes\" : {$gt:100}}, {\"title\" : \"hex\"}]})",
"label": 0
},
{
"text": "db.collection.find({$or: [{\"by\": \"tut\"}, {\"likes\" : {$gt:100}}]})",
"label": 0
},
{
"text": "db.collection.find({$or: [{\"by\": \"tut\"}, {\"likes\" : {$gt:100}}, {\"title\" : \"hex\"}]})",
"label": 0
},
{
"text": "db.collection.find({$or: [{\"title\" : \"hex\"},$and: [{\"by\": \"tut\"}, {\"likes\" : {$gt:100}}]]})",
"label": 0
},
{
"text": "db.collection.find({\"likes\" : {$ne:5}, \"title\" : \"hex\"}, {\"by\":1,_id:0})",
"label": 0
},
{
"text": "db.collection.find({$and: [{\"by\": \"tut\"}, {\"likes\" : {$gt:100}}]}, {\"by\":1,_id:0})",
"label": 0
},
{
"text": "db.collection.find({$and: [{\"by\": \"tut\"}, {\"likes\" : {$gt:100}}, {\"title\" : \"hex\"}]}, {\"by\":1,_id:0})",
"label": 0
},
{
"text": "db.collection.find({$or: [{\"by\": \"tut\"}, {\"likes\" : {$gt:100}}]}, {\"by\":1,_id:0})",
"label": 0
},
{
"text": "db.collection.find({$or: [{\"by\": \"tut\"}, {\"likes\" : {$gt:100}}, {\"title\" : \"hex\"}]}, {\"by\":1,_id:0})",
"label": 0
},
{
"text": "db.collection.find({$or: [{\"title\" : \"hex\"},$and: [{\"by\": \"tut\"}, {\"likes\" : {$gt:100}}]]}, {\"by\":1,_id:0})",
"label": 0
},
{
"text": "db.collection.find({$and[{\"for\" : \"python\"},$or: [{\"title\" : \"hex\"},$and: [{\"by\": \"tut\"}, {\"likes\" : {$gt:100}}]]]}, {\"by\":1,_id:0})",
"label": 0
},
{
"text": "db.collection.find({$and[{\"for\" : \"python\"},$or: [{\"title\" : \"hex\"},$and: [{\"by\": \"tut\"}, {\"likes\" : {$gt:100}}]]]})",
"label": 0
},
{
"text": "db.collection.find({awards: {$elemMatch: {award: \"Turing Award\",year: { $gt: 1980 }}}})",
"label": 0
},
{
"text": "db.collection.find({\"name.first\": \"Yukihiro\",\"name.last\": \"Matsumoto\"})",
"label": 0
},
{
"text": "db.collection.find({$or:[{name: {first: \"Yukihiro\",last: \"Matsumoto\"}},{awards: {$elemMatch: {award: \"Turing Award\",year: { $gt: 1980 }}}} ]})",
"label": 0
},
{
"text": "db.collection.find({ },{_id: 0,'name.last': 1,contribs: { $slice: 2 }})",
"label": 0
},
{
"text": "db.collection.find({$or:[{name: {first: \"Yukihiro\",last: \"Matsumoto\"}},{awards: {$elemMatch: {award: \"Turing Award\",year: { $gt: 1980 }}}}]},{_id: 0,'name.last': 1,contribs: { $slice: 2 }})",
"label": 0
},
{
"text": "db.collection.find({$and[{\"for\" : \"python\"},$or: [{\"title\" : \"hex\"},$and: [{\"by\": \"tut\"}, {\"likes\" : {$gt:100}}]]]},{_id: 0,'name.last': 1,contribs: { $slice: 2 }})",
"label": 0
},
{
"text": "db.collection.findOne({$or: [{ 'name.first' : /^G/ },{ birth: { $lt: new Date('01/01/1945') } }]})",
"label": 0
},
{
"text": "db.bios.findOne({$or: [{ 'name.first' : /^G/ },{ birth: { $lt: new Date('01/01/1945') } }] },{ name: 1, contribs: 1, _id: 0 })",
"label": 0
},
{
"text": "db.collection.findOne({ contribs: 'OOP' },{ _id: 0, 'name.first': 0, birth: 0 })",
"label": 0
},
{
"text": "db.collection.findOne({$or: [{ 'name.first' : /^G/ },{ birth: { $lt: new Date('01/01/1945') } }]},{ _id: 0, 'name.first': 0, birth: 0 })",
"label": 0
},
{
"text": "db.collection.findAndModify({query: {$or: [{\"title\" : \"hex\"},$and: [{\"by\": \"tut\"}, {\"likes\" : {$gt:100}}]]},sort: { rating: 1 },update: { $inc: { score: 1 } },fields: {_id:0, score: 1},bypassDocumentValidation: true})",
"label": 0
},
{
"text": "db.collection.findAndModify({query: { name: \"Andy\" },sort: { rating: 1 },update: { $inc: { score: 1 } },upsert: true})",
"label": 0
},
{
"text": "db.collection.findAndModify({query: { name: \"Tom\", state: \"active\", rating: { $gt: 10 } },sort: { rating: 1 },update: { $inc: { score: 1 } }})",
"label": 0
},
{
"text": "db.collection.findAndModify({query: { $or: [{ 'name.first' : /^G/ },{ birth: { $lt: new Date('01/01/1945') } }]},sort: { rating: 1 },update: { $inc: { score: 1 } }})",
"label": 0
},
{
"text": "db.collection.findAndModify({query: {$or:[{name: {first: \"Yukihiro\",last: \"Matsumoto\"}},{awards: {$elemMatch: {award: \"Turing Award\",year: { $gt: 1980 }}}},{ score: {$gt: 100}}]},sort: { rating: 1 },update: { $inc: { score: 1 } }})",
"label": 0
},
{
"text": "db.people.findAndModify({query: { name: \"Gus\", state: \"active\", rating: 100 },sort: { rating: 1 },update: { $inc: { score: 1 } },upsert: true})",
"label": 0
},
{
"text": "db.people.findAndModify({query: {$and[{\"for\" : \"python\"},$or: [{\"title\" : \"hex\"},$and: [{\"by\": \"tut\"}, {\"likes\" : {$gt:100}}]]]},sort: { rating: 1 },update: { $inc: { score: 1 } },upsert: true})",
"label": 0
},
{
"text": "db.people.findAndModify({query: { name: \"Pascal\", state: \"active\", rating: 25 },sort: { rating: 1 },update: { $inc: { score: 1 } },upsert: true,new: true})",
"label": 0
},
{
"text": "db.people.findAndModify({query: { state: \"active\" },sort: { rating: 1 },remove: true})",
"label": 0
},
{
"text": "db.people.findAndModify({query: {$or:[{name: {first: \"Yukihiro\",last: \"Matsumoto\"}},{awards: {$elemMatch: {award: \"Turing Award\",year: { $gt: 1980 }}}}]},sort: { rating: 1 },remove: true})",
"label": 0
},
{
"text": "db.myColl.findAndModify({query: { category: \"cafe\", status: \"a\" },sort: { category: 1 },update: { $set: { status: \"Updated\" } },collation: { locale: \"fr\", strength: 1 }})",
"label": 0
},
{
"text": "db.myColl.findAndModify({query: {category: \"cafe\",$or: [{status: \"a\"},{status: \"A\"}]},sort: { category: 1 },update: { $set: { status: \"Updated\" } },collation: { locale: \"fr\", strength: 1 }})",
"label": 0
},
{
"text": "db.scores.findOneAndDelete({ \"name\" : \"M. Tagnum\" })",
"label": 0
},
{
"text": "db.collection.findAndModify({$and[{\"for\" : \"python\"},$or: [{\"title\" : \"hex\"},$and: [{\"by\": \"tut\"}, {\"likes\" : {$gt:100}}]]]},{sort: { \"likes\": 1},projection : {\"title\":1, _id:0}})",
"label": 0
},
{
"text": "db.scores.findOneAndDelete({ \"name\" : \"A. MacGyver\" },{ sort : { \"points\" : 1 }, maxTimeMS : 5 })",
"label": 0
},
{
"text": "db.myColl.findOneAndDelete({ category: \"cafe\", status: \"a\" },{ collation: { locale: \"fr\", strength: 1 } })",
"label": 0
},
{
"text": "db.scores.findOneAndReplace({ \"score\" : { $lt : 20000 } },{ \"team\" : \"Observant Badgers\", \"score\" : 20000 })",
"label": 0
},
{
"text": "db.scores.findOneAndReplace({ \"score\" : { $lt : 20000 } },{ \"team\" : \"Observant Badgers\", \"score\" : 20000 },{ sort: { \"score\" : 1 } })",
"label": 0
},
{
"text": "db.scores.findOneAndReplace({ \"score\" : { $lt : 22250 } },{ \"team\" : \"Therapeutic Hamsters\", \"score\" : 22250 },{ sort : { \"score\" : 1 }, project: { \"_id\" : 0, \"team\" : 1 } })",
"label": 0
},
{
"text": "db.scores.findOneAndReplace({ \"team\" : \"Fortified Lobsters\" },{ \"_id\" : 6019, \"team\" : \"Fortified Lobsters\" , \"score\" : 32000},{ upsert : true, returnNewDocument: true })",
"label": 0
},
{
"text": "db.myColl.findOneAndReplace({ category: \"cafe\", status: \"a\" },{ category: \"caf\u00c9\", status: \"Replaced\" },{ collation: { locale: \"fr\", strength: 1 } })",
"label": 0
},
{
"text": "db.scores.findOneAndUpdate({ \"name\" : \"R. Stiles\" },{ $inc: { \"points\" : 5 } })",
"label": 0
},
{
"text": "db.scores.findOneAndUpdate({ \"name\" : \"A. MacDyver\" },{ $inc : { \"points\" : 5 } },{ sort : { \"points\" : 1 } })",
"label": 0
},
{
"text": "db.scores.findOneAndUpdate({ \"name\" : \"A. MacDyver\" },{ $inc : { \"points\" : 5 } },{ sort : { \"points\" : 1 }, projection: { \"assignment\" : 1, \"points\" : 1 } })",
"label": 0
},
{
"text": "db.scores.findOneAndUpdate({ \"name\" : \"A.B. Abracus\" },{ $set: { \"name\" : \"A.B. Abracus\", \"assignment\" : 5}, $inc : { \"points\" : 5 } },{ sort: { \"points\" : 1 }, upsert:true, returnNewDocument : true })",
"label": 0
},
{
"text": "db.myColl.findOneAndUpdate({ category: \"cafe\" },{ $set: { status: \"Updated\" } },{ collation: { locale: \"fr\", strength: 1 } });",
"label": 0
},
{
"text": "var mapFunction1 = function() {emit(this.cust_id, this.price);};var reduceFunction1 = function(keyCustId, valuesPrices) {return Array.sum(valuesPrices);};db.orders.mapReduce(mapFunction1,reduceFunction1,{ out: \"map_reduce_example\" })",
"label": 0
},
{
"text": "var mapFunction2 = function() {for (var idx = 0; idx < this.items.length; idx++) {var key = this.items[idx].sku;var value = {count: 1,qty: this.items[idx].qty};emit(key, value);}};var reduceFunction2 = function(keySKU, countObjVals) {reducedVal = {count: 0, qty: 0 };for (var idx = 0; idx < countObjVals.length; idx++) {reducedVal.count += countObjVals[idx].count;reducedVal.qty += countObjVals[idx].qty;}return reducedVal;};var finalizeFunction2 = function (key,reducedVal) {reducedVal.avg = reducedVal.qty/reducedVal.count;return reducedVal;};db.orders.mapReduce( mapFunction2,reduceFunction2,{out: { merge: \"map_reduce_example\" },query: { ord_date:{ $gt: new Date('01/01/2012') }},finalize: finalizeFunction2})",
"label": 0
},
{
"text": "var mapper = function () {emit(this.gender, 1);};var reducer = function(gender, count){return Array.sum(count);};db.sourceData.mapReduce(mapper,reducer,{out : \"example1_results\"});",
"label": 0
},
{
"text": "var mapper = function () {var x = {age : this.age, name : this.name};emit(this.gender, {min : x , max :x});};var reducer =function(key, values){var res = values[0];for (var i = 1; i < values.length; i++) {if(values[i].min.age < res.min.age)res.min= {name : values[i].min.name, age : values[i].min.age};if (values[i].max.age > res.max.age)res.max = {name:values[i].max.name, age : values[i].max.age};};return res;};db.sourceData.mapReduce(mapper,reducer,{out :\"example2_results\"});",
"label": 0
},
{
"text": "var mapper = function () {var hobbys = this.hobbies.split(',');for (i in hobbys) {emit(hobbys[i], 1);}};var reducer = function(key, values) {var count = 0;for (index in values) {count += values[index];}return count;};db.sourceData.mapReduce(mapper,reducer,{out : \"example3_results\"});",
"label": 0
},
{
"text": "db.runCommand( {mapReduce: \"books\",map: function() {for (var index = 0; index < this.authors.length; ++index) {var author =this.authors[ index ];emit( author.firstName + \" \" + author.lastName, 1 );}},reduce: function(author, counters) {count = 0;for (var index = 0; index < counters.length; ++index) {count += counters[index];}return count;},out: { inline: 1 }} );",
"label": 0
},
{
"text": "var map = function(){emit(this.url, 1);}var reduce = function(key, values){var res = 0;values.forEach(function(v){ res += 1});return {count: res};}db.sites.mapReduce(map, reduce, { out: \"mapped_urls\" });",
"label": 0
},
{
"text": "db.products.save( { item: \"book\", qty: 40 } )",
"label": 0
},
{
"text": "db.products.save({ item: \"envelopes\", qty : 100, type: \"Clasp\" },{ writeConcern: { w: \"majority\", wtimeout: 5000 } })",
"label": 0
},
{
"text": "db.products.insert([{ _id: 11, item: \"pencil\", qty: 50, type: \"no.2\" },{ item: \"pen\", qty: 20 },{ item: \"eraser\", qty: 25 }])",
"label": 0
},
{
"text": "db.products.insert([{ _id: 20, item: \"lamp\", qty: 50, type: \"desk\" },{ _id: 21, item: \"lamp\", qty: 20, type: \"floor\" },{ _id:22, item: \"bulk\", qty: 100 }],{ ordered: false })",
"label": 0
},
{
"text": "db.products.insert({ item: \"envelopes\", qty : 100, type: \"Clasp\" },{ writeConcern: { w: \"majority\", wtimeout: 5000 } })",
"label": 0
},
{
"text": "try {db.products.insertOne({ \"item\": \"envelopes\", \"qty\": 100, type: \"Self-Sealing\" },{ writeConcern: { w : \"majority\",wtimeout : 100 } });} catch (e) {print (e);}",
"label": 0
},
{
"text": "try {db.products.insertMany( [{ _id: 10, item: \"large box\", qty: 20 },{ _id: 11, item: \"small box\", qty: 55 },{ _id: 12, item: \"medium box\", qty: 30 }] );} catch (e) {print (e);}",
"label": 0
},
{
"text": "try {db.products.insertMany([{ _id: 10, item: \"large box\", qty: 20 },{ _id: 11, item: \"small box\", qty: 55 },{ _id: 12, item:\"medium box\", qty: 30 }],{ w: \"majority\", wtimeout: 100 });} catch (e) {print (e);}",
"label": 0
},
{
"text": "db.restaurants.find().sort( { \"borough\": 1, \"address.zipcode\": 1 } )",
"label": 0
},
{
"text": "db.runCommand( {mapReduce: \"books\",scope: { currency: \"US\" },map: function() {emit( this.publisher, { count: 1, price:this.price } );},reduce: function(publisher, values) {var value = { count: 0, price: 0 };for (var index = 0; index <values.length; ++index) {value.count += values[index].count;value.price += values[index].price;}return value;},finalize:function(publisher, value) {value.average = currency + ( value.price / value.count ).toFixed(2);return value;},out: {replace: \"results\"}} )",
"label": 0
},
{
"text": "db.runCommand( {mapReduce: \"books\",scope: { currency: \"US\" },map: function() {emit( this.publisher, { count: 1, price: this.price } );},reduce: function(publisher, values) {var value = { count: 0, price: 0 };for (var index = 0; index < values.length; ++index) {value.count += values[index].count;value.price += values[index].price;}return value;},finalize: function(publisher, value) {value.average = currency + ( value.price / value.count ).toFixed(2);return value;},query: { \"authors.lastName\": { $in: [ \"Cantelon\", \"O'Higgins\" ] } },limit: 2,out: {reduce: \"results\"}} )",
"label": 0
},
{
"text": "db.customers.find({$and: [{$or: [{\"last_login\": \"2017-10-08\"},{\"last_login\": \"2017-10-07\"},{\"last_login\": \"2017-10-06\"}]},{$or: [{\"address.country\": \"Spain\"},{\"address.country\": \"France\"}]}]})",
"label": 0
},
{
"text": "db.customers.find({$and: [{ \"last_login\": { $in: [\"2017-10-08\", \"2017-10-07\", \"2017-10-06\"] }},{ \"address.country\": { $in:[\"Spain\", \"French\"] }},]})",
"label": 0
},
{
"text": "db.customers.find({$and: [{ \"last_login\": { $gte: \"2017-10-06\" }},{ \"address.country\": { $in: [\"Spain\", \"French\"] }},]})",
"label": 0
},
{
"text": "db.customers.find({\"address.country\": { $nin: [\"Spain\", \"French\"] }})",
"label": 0
},
{
"text": "db.car.findAndModify({query: { name: \"Alto\" },sort: { cno: 1 },update: { $inc: { speed: 10 } },})",
"label": 0
},
{
"text": "db.car.findAndModify({query: { name: \"HondaCity\", color: \"Silver\", cno:\"H415\" ,speed: 25 },sort: { cno: 1 },update: { $inc: {speed: 20 } },upsert: true,new: true})",
"label": 0
},
{
"text": "db.car.findAndModify({query: { name: \"WagonR\" },sort: { cno: 1 },update: { $inc: { speed: 5 } },upsert: <strong>true</strong>})",
"label": 0
},
{
"text": "db.car.findAndModify({query: { name: \"Alto\" },sort: { cno: 1 },remove: true})",
"label": 0
},
{
"text": "$col->findAndModify(array(\"inprogress\" => false, \"name\" => \"Biz report\"),array('$set' => array('inprogress' => true, \"started\"=> new MongoDate())),null,array(\"sort\" => array(\"priority\" => -1),\"new\" => true,));",
"label": 0
},
{
"text": "try {$retval = $col->findAndModify(array(\"inprogress\" => false, \"name\" => \"Next promo\"),array('$pop' => array(\"tasks\" => -1)),array(\"tasks\" => array('$pop' => array(\"stuff\"))),array(\"new\" => true));} catch(MongoResultException $e) {echo $e->getCode(), \" : \", $e->getMessage(), \"\\n\";var_dump($e->getDocument());}",
"label": 0
},
{
"text": "$studentCollection->findAndModify(array(\"_id\" => $studentId), ('$set' => array('Active' => false, \"Reason\"=> \"Duplicate entry\" \"DeleteDate\" => new MongoDate())), (\"Payments\" => 1), array(\"new\" => false ));",
"label": 0
},
{
"text": "try {db.restaurant.replaceOne({ \"name\" : \"Pizza Rat's Pizzaria\" },{ \"_id\": 4, \"name\" : \"Pizza Rat's Pizzaria\", \"Borough\" : \"Manhattan\", \"violations\" : 8 },{ upsert: true });} catch (e){print(e);}",
"label": 0
},
{
"text": "try {db.restaurant.replaceOne({ \"name\" : \"Pizza Rat's Pizzaria\" },{ \"name\" : \"Pizza Rat's Pub\", \"Borough\" : \"Manhattan\", \"violations\" : 3 },{ w: \"majority\", wtimeout: 100 });} catch (e) {print(e);}",
"label": 0
},
{
"text": "$map = new \\MongoCode(\"function () { this.value['p'] = this.value['p'].replace('$from', '$to');emit(this._id, this.value);}\"); $collection = $this->mongoCollection(); $reduce = new \\MongoCode(\"function () { }\"); $collection_name = $collection->getName(); $collection->db->command([ 'mapreduce' => $collection_name, 'map' => $map, 'reduce' => $reduce, 'out' => ['merge' => $collection_name], 'query' => $query, 'sort' => ['_id' => 1] ]);",
"label": 0
},
{
"text": "db.media.find({mediaContainer:\"ContainerS3\"}).forEach(function(e,i) { e.url=e.url.replace(\"//a.n.com\",\"//b.n.com\"); db.media.save(e); });",
"label": 0
},
{
"text": "db.collection('ABC').find({url: /helloWorldt/}).toArray((err, docs) => {docs.forEach(doc => { let URL = doc.URL.replace('helloWorldt', 'helloWorld'); db.collection('ABC').updateOne({_id: doc._id}, {URL}); }); });",
"label": 0
},
{
"text": "db.collection.insert( {\"name\":\"name-here\"} )$collection->insert(array(\"name\" => \"name-here\"));",
"label": 0
},
{
"text": "db.collection.save( {\"id\":\"001\", \"name\":\"name-here\"} )$collection->save(array(\"_id\" => \"59d77a00640d6ca80400002d\",\"title\"=>\"title-here\"));",
"label": 0
},
{
"text": "db.collection.update( {\"title\":\"old-title\"}, {$set:{\"title\":\"new-title\"}} )$collection->update(array(\"title\"=>\"MongoDB Tutorial\"),array('$set'=>array(\"title\"=>\"MongoDB\")),);",
"label": 0
},
{
"text": "db.collection.update( {\"title\":\"old-title\"}, {$set:{\"title\":\"new-title\"}}, {multi:true} )$collection->update(array(\"title\"=>\"MongoDB Tutorial\"),array('$set'=>array(\"title\"=>\"MongoDB\")),array(\"multiple\"=>true));",
"label": 0
},
{
"text": "db.collection.remove( {\"title\":\"title-here\"} )$collection->remove(array(\"title\"=>\"MongoDB\"));",
"label": 0
},
{
"text": "db.collection.remove( {\"title\":\"title-here\"}, 1 )$collection->remove(array(\"title\"=>\"MongoDB\"),array(\"justOne\" => true));",
"label": 0
},
{
"text": "db.restaurant.updateOne({ \"name\" : \"Central Perk Cafe\" },{ $set: { \"violations\" : 3 } });$collection->update(array(\"name\" => \"Central Perk Cafe\"),array('$set' => array(\"violations\"=>3)),array(\"multiple\" => false));",
"label": 0
},
{
"text": "db.restaurant.updateOne({ \"name\" : \"Pizza Rat's Pizzaria\" },{ $inc: { \"violations\" : 3}, $set: { \"Closed\" : true } },{ w: \"majority\", wtimeout: 100 });$collection->update(array(\"name\" => \"Pizza Rat's Pizzaria\"),array('$inc' => array(\"violations\"=>3), '$set' => array(\"Closed\" => true)),array(\"multiple\" => false, \"w\" => \"majority\", \"wTimeoutMS\" => 100));",
"label": 0
},
{
"text": "db.myColl.updateOne({ category: \"cafe\" },{ $set: { status: \"Updated\" } },{ collation: { locale: \"fr\", strength: 1 } });$collection->update(array(\"category\" => \"cafe\"),array('$set' => array(\"status\" => \"Updated\")),array(\"multiple\" => false, \"collation\" => array(\"locale\" => \"fr\", \"strength\" => 1)));",
"label": 0
},
{
"text": "db.restaurant.updateMany({ violations: { $gt: 4 } },{ $set: { \"Review\" : true } });$collection->update(array(\"violations\" =>array('$gt' => 4)),array('$set' => array(\"Review\" => true)),array(\"multiple\" => true));",
"label": 0
},
{
"text": "db.restaurant.updateMany({ \"name\" : \"Pizza Rat's Pizzaria\" },{ $inc: { \"violations\" : 3}, $set: { \"Closed\" : true } },{ w: \"majority\", wtimeout: 100 });$collection->update(array(\"name\" => \"Pizza Rat's Pizzaria\"),array('$inc' => array(\"violations\"=>3), '$set' => array(\"Closed\" => true)),array(\"multiple\" => true, \"w\" => \"majority\", \"wTimeoutMS\" => 100));",
"label": 0
},
{
"text": "db.myColl.updateMany({ category: \"cafe\" },{ $set: { status: \"Updated\" } },{ collation: { locale: \"fr\", strength: 1 } });$collection->update(array(\"category\" => \"cafe\"),array('$set' => array(\"status\" => \"Updated\")),array(\"multiple\" => true, \"collation\" => array(\"locale\" => \"fr\", \"strength\" => 1)));",
"label": 0
},
{
"text": "db.demo.group({\"key\": {\"person\": true},\"initial\": {\"sumscore\": 0,\"sumforaverageaveragescore\": 0,\"countforaverageaveragescore\": 0,\"countstar\": 0},\"reduce\": function(obj, prev) {prev.sumscore = prev.sumscore + obj.score - 0;prev.sumforaverageaveragescore += obj.score;prev.countforaverageaveragescore++;prev.minimumvaluescore = isNaN(prev.minimumvaluescore) ? obj.score : Math.min(prev.minimumvaluescore, obj.score);prev.maximumvaluescore = isNaN(prev.maximumvaluescore) ? obj.score : Math.max(prev.maximumvaluescore, obj.score);if (true != null) if (true instanceof Array) prev.countstar += true.length;else prev.countstar++;},\"finalize\": function(prev) {prev.averagescore = prev.sumforaverageaveragescore / prev.countforaverageaveragescore;delete prev.sumforaverageaveragescore;delete prev.countforaverageaveragescore;},\"cond\": {\"score\": {\"$gt\": 0},\"person\": {\"$in\": [\"bob\", \"jake\"]}}});",
"label": 0
},
{
"text": "db.EMPLOYEES.group({\"key\": {\"SALARY\": true},\"initial\": {\"countstar\": 0},\"reduce\": function(obj, prev) {if (true != null) if (true instanceof Array) prev.countstar += true.length;else prev.countstar++;},\"cond\": {\"SALARY\": {\"$gt\": 1000}}});",
"label": 0
},
{
"text": "db.shop.group({\"initial\": {},\"reduce\": function(obj, prev) {prev.article = isNaN(prev.article) ? obj.article : Math.max(prev.article, obj.article);}});",
"label": 0
},
{
"text": "db.collection.aggregate( [{ $match : {createdDate:{ $gt : ISODate(\"2015-05-01T00:00:00.000Z\"), $lte : ISODate(\"2015-05-20T23:59:59.000Z\")}}},{ $group : { _id : { year: { $year: \"$createdDate\" },month: { $month: \"$createdDate\" },day: { $dayOfMonth : \"$createdDate\" },appId : \"$appId\"}}}, { $group : { _id : {appIdd: '$_id.appId'}, count: { $sum: 1 }}}, { $project: { created_date_str: {$concat:[\"$_id.year\",\"-\",\"$_id.month\",\"-\",\"$_id.day\",\"T00:00:00Z\"]},count: 1}}, { $project: { _id : 0, created_date: { ISODate(\"$created_date_str\") }, count: 1}}]);",
"label": 0
},
{
"text": "$top_orders = Orders::aggregate(array( array('$group' => array('_id' => '$pro_id', 'count' => array( '$sum' => 1 ) )), array( '$match' => array( 'count' => array( '$gt' => 100 ))), array( '$sort' => array( 'count' => -1 ) ), array( '$limit' => 5 ) ));",
"label": 0
},
{
"text": "db.old_user.find({},{username:1,password:1}).forEach(function(data){ db.users.insert(data)})",
"label": 0
},
{
"text": "db.shop.group({\"initial\": {},\"reduce\": function(obj, prev) {prev.maximumvalueprice = isNaN(prev.maximumvalueprice) ? obj.price : Math.max(prev.maximumvalueprice, obj.price);}}).forEach(function(data){db.shop.find({\"price\": 100}, {\"article\": 1,\"dealer\": 1,\"price\": 1})})",
"label": 0
},
{
"text": "db.shop.aggregate([ { \"$sort\": { \"price\": -1 } }, { \"$group\": {\"_id\": null, \"article\": { \"$first\": \"$article\" }, \"dealer\": { \"$first\": \"$dealer\" }, \"price\": { \"$first\": \"$price\" } } } ])",
"label": 0
},
{
"text": "db.shop.aggregate([{ \"$sort\": { \"price\": 1 } },{ \"$group\": { \"_id\": null, \"article\": { \"$last\": \"$article\" }, \"dealer\": { \"$last\": \"$dealer\" }, \"price\": { \"$last\": \"$price\" } } } ])",
"label": 0
},
{
"text": "db.shop.group({\"key\": {\"dealer\": true},\"initial\": {},\"reduce\": function(obj, prev) {prev.maximumvalueprice = isNaN(prev.maximumvalueprice) ? obj.price : Math.max(prev.maximumvalueprice, obj.price);}});",
"label": 0
},
{
"text": "db.shop.group({\"key\": {\"dealer\": true},\"initial\": {\"countarticle\": 0},\"reduce\": function(obj, prev) {if (obj.article != null) if (obj.article instanceof Array) prev.countarticle += obj.article.length;else prev.countarticle++;}});",
"label": 0
},
{
"text": "db.shop.group({\"initial\": {},\"reduce\": function(obj, prev) {prev.article = isNaN(prev.article) ? obj.article : Math.max(prev.article, obj.article);}});",
"label": 0
},
{
"text": "db.shop.find({}, {\"article\": 1,\"dealer\": 1,\"price\": 1}).limit(1).sort({\"price\": -1});",
"label": 0
},
{
"text": "db.shop.group({\"key\": {\"article\": true},\"initial\": {},\"reduce\": function(obj, prev) {prev.price = isNaN(prev.price) ? obj.price : Math.max(prev.price, obj.price);}})",
"label": 0
},
{
"text": "db.runCommand({\"distinct\": \"officers\",\"key\": \"address\"});",
"label": 0
},
{
"text": "db.officers.find({\"officer_id\": {\"$lt\": 5}}, {\"officer_name\": 1,\"address\": 1}).sort({\"officer_name\": -1,\"address\": 1});",
"label": 0
},
{
"text": "db.officers.group({\"key\": {\"address\": true},\"initial\": {\"countstar\": 0},\"reduce\": function(obj, prev) {if (true != null) if (true instanceof Array) prev.countstar += true.length;else prev.countstar++;}});",
"label": 0
},
{
"text": "db.employees.group({\"key\": {\"emp_name\": true},\"initial\": {\"Total working hours\": 0},\"reduce\": function(obj, prev) {prev.Total working hours = prev.Total working hours + obj.working_hours - 0;}});",
"label": 0
},
{
"text": "db.officers.find({\"address\": \"Luck%\"}, {\"officer_name\": 1});",
"label": 0
},
{
"text": "db.officers.find({\"address\": \"Luc_now\"}, {\"officer_name\": 1});",
"label": 0
},
{
"text": "db.student.find( {\"sex\": { $not: /^M.*/}}).pretty();",
"label": 0
},
{
"text": "db.officers.find({\"officer_name\": {\"$in\": [\"Ajeet\", \"Vimal\", \"Deepika\"]}});",
"label": 0
},
{
"text": "db.officers.find({\"officer_name\": {\"$not\": {\"$in\": [\"Ajeet\", \"Vimal\", \"Deepika\"]}}});",
"label": 0
},
{
"text": "db.officers.find({\"officer_name\": {\"$ne\": null}});",
"label": 0
},
{
"text": "db.officers.find({\"officer_name\": {\"$gte\": 3,\"$lte\": 5}});",
"label": 0
},
{
"text": "db.officers.find({\"officer_name\": {\"$lt\": 3,\"$gt\": 5}});",
"label": 0
},
{
"text": "db.officers.find({\"officer_name\": null});",
"label": 0
},
{
"text": "db.employee.find().limit(3).skip(1);",
"label": 0
},
{
"text": "db.employee.aggregate({ $sample: { size: 1 } },)",
"label": 0
},
{
"text": "db.accounts.find( username: username, password: password)",
"label": 0
},
{
"text": "db.user.save({\"_id\" : 1234, \"name\" : {\"first\": \"foo\", \"last\" : \"bar\"}})",
"label": 0
},
{
"text": "db.createCollection(\"mycol\", { capped : true, autoIndexId : true, size : 6142800, max : 10000 } )",
"label": 0
},
{
"text": "db.students.find( { grades: { $elemMatch: { mean: { $gt: 70 }, grade: { $gt:90 } }}}, { \"grades.$\": 1 } )",
"label": 0
},
{
"text": "db.orders.aggregate([{$match: {status: \"A\"}},{$group: {_id: \"$cust_id\", total: {$sum: \"$amount\"}}}])",
"label": 0
},
{
"text": "db.orders.count()",
"label": 0
},
{
"text": "db.orders.count( { ord_dt: { $gt: new Date('01/01/2012') } } )",
"label": 0
},
{
"text": "db.collection.aggregate([{ $group: { _id: null, count: { $sum: 1 } } }])",
"label": 0
},
{
"text": "db.collection.aggregate([{ $match: {title: \"MongoDB\"} },{ $group: { _id: null, count: { $sum: 1 } } }])",
"label": 0
},
{
"text": "db.collection.find( { a: 5, b: 5 } ).count()",
"label": 0
},
{
"text": "db.collection.find( { a: 5, b: { $gt: 10 } } ).count()",
"label": 0
},
{
"text": "db.collection.find( { a: 5, b: { $in: [ 1, 2, 3 ] } } ).count()",
"label": 0
},
{
"text": "db.orders.count( { ord_dt: { $gt: new Date('01/01/2012') } } ,{ $limit: 10 })",
"label": 0
},
{
"text": "db.orders.count( { ord_dt: { $gt: new Date('01/01/2012') } } ,{ $limit: 10, $skip: 5 })",
"label": 0
},
{
"text": "db.orders.count( { ord_dt: { $gt: new Date('01/01/2012') } } ,{ $maxTimeMS: 1000 })",
"label": 0
},
{
"text": "db.collection.distinct()",
"label": 0
},
{
"text": "db.inventory.distinct( \"sizes\" )",
"label": 0
},
{
"text": "db.inventory.distinct( \"item.sku\" )",
"label": 0
},
{
"text": "db.inventory.distinct( \"item.sku\", { dept: \"A\" } )",
"label": 0
},
{
"text": "db.myColl.distinct( \"category\", {}, { collation: { locale: \"fr\", strength: 1 } } )",
"label": 0
},
{
"text": "db.scores.aggregate( [{$addFields: {totalHomework: { $sum: \"$homework\" } ,totalQuiz: { $sum: \"$quiz\" }}}] )",
"label": 0
},
{
"text": "db.scores.aggregate( [{$addFields: {totalHomework: { $sum: \"$homework\" } ,totalQuiz: { $sum: \"$quiz\" }}},{$addFields: { totalScore:{ $add: [ \"$totalHomework\", \"$totalQuiz\", \"$extraCredit\" ] } }}] )",
"label": 0
},
{
"text": "db.vehicles.aggregate( [{$addFields: {\"specs.fuel_type\": \"unleaded\"}}] )",
"label": 0
},
{
"text": "db.fruit.aggregate( [{$addFields: {_id : \"$item\",item: \"fruit\"}}] )",
"label": 0
},
{
"text": "db.artwork.aggregate( [{$bucket: {groupBy: \"$price\",boundaries: [ 0, 200, 400 ],default: \"Other\",output: {\"count\": { $sum: 1 },\"titles\" : { $push: \"$title\" }}}}] )",
"label": 0
},
{
"text": "db.artwork.aggregate( [{$facet: {\"price\": [{$bucket: {groupBy: \"$price\",boundaries: [ 0, 200, 400 ],default: \"Other\",output: {\"count\": { $sum: 1 },\"artwork\" : { $push: { \"title\": \"$title\", \"price\": \"$price\" } }}}}],\"year\": [{$bucket: {groupBy: \"$year\",boundaries: [ 1890, 1910, 1920, 1940 ],default: \"Unknown\",output: {\"count\": { $sum: 1 },\"artwork\": { $push: { \"title\": \"$title\", \"year\": \"$year\" } }}}}]}}] )",
"label": 0
},
{
"text": "db.artwork.aggregate( [{$bucketAuto: {groupBy: \"$price\",buckets: 4}}] )",
"label": 0
},
{
"text": "db.artwork.aggregate( [{$facet: {\"price\": [{$bucketAuto: {groupBy: \"$price\",buckets: 4}}],\"year\": [{$bucketAuto: {groupBy: \"$year\",buckets: 3,output: {\"count\": { $sum: 1 },\"years\": { $push: \"$year\" }}}}],\"area\": [{$bucketAuto: {groupBy: {$multiply: [ \"$dimensions.height\", \"$dimensions.width\" ]},buckets: 4,output: {\"count\": { $sum: 1 },\"titles\": { $push: \"$title\" }}}}]}}] )",
"label": 0
},
{
"text": "db.matrices.aggregate( [ { $collStats: { latencyStats: { histograms: true } } } ] )",
"label": 0
},
{
"text": "db.matrices.aggregate( [ { $collStats: { count: { } } } ] )",
"label": 0
},
{
"text": "db.scores.aggregate([{$match: {score: {$gt: 80}}},{$count: \"passing_scores\"}])",
"label": 0
},
{
"text": "db.places.aggregate([{$geoNear: {near: { type: \"Point\", coordinates: [ -73.99279 , 40.719296 ] },distanceField:\"dist.calculated\",maxDistance: 2,query: { type: \"public\" },includeLocs: \"dist.location\",num: 5,spherical: true}}])",
"label": 0
},
{
"text": "db.places.aggregate([{$geoNear: {near: { type: \"Point\", coordinates: [ -73.99279 , 40.719296 ] },distanceField: \"dist.calculated\",minDistance: 2,query: { type: \"public\" },includeLocs: \"dist.location\",num: 5,spherical: true}}])",
"label": 0
},
{
"text": "db.employees.aggregate( [{$graphLookup: {from: \"employees\",startWith: \"$reportsTo\",connectFromField: \"reportsTo\",connectToField: \"name\",as: \"reportingHierarchy\"}}] )",
"label": 0
},
{
"text": "db.travelers.aggregate( [{$graphLookup: {from: \"airports\",startWith: \"$nearestAirport\",connectFromField: \"connects\",connectToField: \"airport\",maxDepth: 2,depthField: \"numConnections\",as: \"destinations\"}}] )",
"label": 0
},
{
"text": "db.people.aggregate( [{ $match: { \"name\": \"Tanya Jordan\" } },{ $graphLookup: {from: \"people\",startWith: \"$friends\",connectFromField: \"friends\",connectToField: \"name\",as: \"golfers\",restrictSearchWithMatch: { \"hobbies\" : \"golf\" }}},{ $project: {\"name\": 1,\"friends\": 1,\"connections who play golf\": \"$golfers.name\"}}] )",
"label": 0
},
{
"text": "db.sales.aggregate([{$group : {_id : { month: { $month: \"$date\" }, day: { $dayOfMonth: \"$date\" }, year: { $year: \"$date\" } },totalPrice: { $sum: { $multiply: [ \"$price\", \"$quantity\" ] } },averageQuantity: { $avg: \"$quantity\" },count: { $sum: 1 }}}])",
"label": 0
},
{
"text": "db.sales.aggregate([{$group : {_id : null,totalPrice: { $sum: { $multiply: [ \"$price\", \"$quantity\" ] } },averageQuantity: { $avg: \"$quantity\" },count: { $sum: 1 }}}])",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $group : { _id : \"$item\" } } ] )",
"label": 0
},
{
"text": "db.books.aggregate([{ $group : { _id : \"$author\", books: { $push: \"$$ROOT\" } } }])",
"label": 0
},
{
"text": "db.orders.aggregate( [ { $indexStats: { } } ] )",
"label": 0
},
{
"text": "db.article.aggregate({ $limit : 5 });",
"label": 0
},
{
"text": "db.aggregate( [ { $listLocalSessions: { } } ] )",
"label": 0
},
{
"text": "db.aggregate( [ { $listLocalSessions: { allUsers: true } } ] )",
"label": 0
},
{
"text": "db.aggregate( [ { $listLocalSessions: { users: [ { user: \"myAppReader\", db: \"test\" } ] } } ] )",
"label": 0
},
{
"text": "db.system.sessions.aggregate( [ { $listSessions: { allUsers: true } } ] )",
"label": 0
},
{
"text": "db.system.sessions.aggregate( [ { $listSessions: { } } ] )",
"label": 0
},
{
"text": "db.system.sessions.aggregate( [ { $listSessions: { users: [ {user: \"myAppReader\", db: \"test\" } ] } } ] )",
"label": 0
},
{
"text": "db.orders.aggregate([{$lookup:{from: \"inventory\",localField: \"item\",foreignField: \"sku\",as: \"inventory_docs\"}}])",
"label": 0
},
{
"text": "db.orders.aggregate([{$unwind: \"$specs\"},{$lookup:{from: \"inventory\",localField: \"specs\",foreignField: \"size\",as: \"inventory_docs\"}},{$match: { \"inventory_docs\": { $ne: [] } }}])",
"label": 0
},
{
"text": "db.orders.aggregate([{$lookup: {from: \"items\", localField: \"item\", foreignField: \"item\", as: \"fromItems\"}},{$replaceRoot: { newRoot: { $mergeObjects: [ { $arrayElemAt: [ \"$fromItems\", 0 ] }, \"$$ROOT\" ] } }},{ $project: { fromItems: 0 } }])",
"label": 0
},
{
"text": "db.orders.aggregate([{$lookup:{from: \"warehouses\",let: { order_item: \"$item\", order_qty: \"$ordered\" },pipeline: [{ $match:{ $expr:{ $and:[{ $eq: [ \"$stock_item\", \"$$order_item\" ] },{ $gte: [ \"$instock\", \"$$order_qty\" ] }]}}},{ $project: { stock_item: 0, _id: 0 } }],as: \"stockdata\"}}])",
"label": 0
},
{
"text": "db.absences.aggregate([{$lookup:{from: \"holidays\",pipeline: [{ $match: { year: 2018 } },{ $project: { _id: 0, date: { name: \"$name\", date: \"$date\" } } },{ $replaceRoot: { newRoot: \"$date\" } }],as: \"holidays\"}}])",
"label": 0
},
{
"text": "db.articles.aggregate([ { $match : { author : \"dave\" } } ]);",
"label": 0
},
{
"text": "db.articles.aggregate( [{ $match: { $or: [ { score: { $gt: 70, $lt: 90 } }, { views: { $gte: 1000 } } ] } },{ $group: { _id: null, count: { $sum: 1 } } }] );",
"label": 0
},
{
"text": "db.books.aggregate( [{ $group : { _id : \"$author\", books: { $push: \"$title\" } } },{ $out : \"authors\" }] )",
"label": 0
},
{
"text": "db.books.aggregate( [ { $project : { title : 1 , author : 1 } } ] )",
"label": 0
},
{
"text": "db.bookmarks.aggregate( [ { $project: { \"author\": { \"first\": 0}, \"lastModified\" : 0 } } ] )",
"label": 0
},
{
"text": "db.books.aggregate( [{$project: {title: 1,\"author.first\": 1,\"author.last\" : 1,\"author.middle\": {$cond: {if: { $eq: [ \"\", \"$author.middle\" ] },then: \"$$REMOVE\",else: \"$author.middle\"}}}}] )",
"label": 0
},
{
"text": "db.bookmarks.aggregate( [ { $project: { \"stop.title\": 1 } } ] )",
"label": 0
},
{
"text": "db.bookmarks.aggregate( [ { $project: { stop: { title: 1 } } } ] )",
"label": 0
},
{
"text": "db.books.aggregate([{$project: {title: 1,isbn: {prefix: { $substr: [ \"$isbn\", 0, 3 ] },group: { $substr: [ \"$isbn\", 3, 2 ] },publisher: { $substr: [ \"$isbn\", 5, 4 ] },title: { $substr: [ \"$isbn\", 9, 3 ] },checkDigit: { $substr: [ \"$isbn\", 12, 1] }},lastName: \"$author.last\",copiesSold: \"$copies\"}}])",
"label": 0
},
{
"text": "db.collection.aggregate( [ { $project: { myArray: [ \"$x\", \"$y\" ] } } ] )",
"label": 0
},
{
"text": "var userAccess = [ \"STLW\", \"G\" ];db.forecasts.aggregate([{ $match: { year: 2014 } },{ $redact: {$cond: {if: { $gt: [ { $size: { $setIntersection: [ \"$tags\", userAccess ] } }, 0 ] },then: \"$$DESCEND\",else: \"$$PRUNE\"}}}]);",
"label": 0
},
{
"text": "db.accounts.aggregate([{ $match: { status: \"A\" } },{$redact: {$cond: {if: { $eq: [ \"$level\", 5 ] },then: \"$$PRUNE\",else: \"$$DESCEND\"}}}]);",
"label": 0
},
{
"text": "db.produce.aggregate( [{$replaceRoot: { newRoot: \"$in_stock\" }}] )",
"label": 0
},
{
"text": "db.people.aggregate( [{$match: { pets : { $exists: true } }},{$replaceRoot: { newRoot: \"$pets\" }}] )",
"label": 0
},
{
"text": "db.contacts.aggregate( [{$replaceRoot: {newRoot: {full_name: {$concat : [ \"$first_name\", \" \", \"$last_name\" ]}}}}] )",
"label": 0
},
{
"text": "db.contacts.aggregate( [{$unwind: \"$phones\"},{$match: { \"phones.cell\" : { $exists: true } }},{$replaceRoot: { newRoot: \"$phones\"}}] )",
"label": 0
},
{
"text": "db.users.aggregate([ { $sample: { size: 3 } } ])",
"label": 0
},
{
"text": "db.article.aggregate({ $skip : 5 });",
"label": 0
},
{
"text": "db.users.aggregate([{ $sort : { age : -1, posts: 1 } }])",
"label": 0
},
{
"text": "db.users.aggregate([{ $match: { $text: { $search: \"operating\" } } },{ $sort: { score: { $meta: \"textScore\" }, posts: -1 } }])",
"label": 0
},
{
"text": "db.articles.aggregate([{ $match: { $text: { $search: \"saber -claro\", $language: \"es\" } } },{ $group: { _id: null, views: { $sum: \"$views\" } } }])",
"label": 0
},
{
"text": "db.articles.aggregate([{ $match: { $text: { $search: \"cake tea\" } } },{ $project: { title: 1, _id: 0, score: { $meta: \"textScore\" } } },{ $match: { score: { $gt: 1.0 } } }])",
"label": 0
},
{
"text": "db.mobiles.find({$text : {$search : \"samsung note edge\"}}, {score : {$meta : \"textScore\" }}).sort({score : {$meta : \"textScore\" }})",
"label": 0
},
{
"text": "db.exhibits.aggregate( [ { $unwind: \"$tags\" }, { $sortByCount: \"$tags\" } ] )",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $unwind : \"$sizes\" } ] )",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $unwind: { path: \"$sizes\", includeArrayIndex: \"arrayIndex\" } } ] )",
"label": 0
},
{
"text": "db.inventory.aggregate( [{ $unwind: { path: \"$sizes\", preserveNullAndEmptyArrays: true } }] )",
"label": 0
},
{
"text": "db.users.find({\"username\": \"admin\", \"password\": {\"$gt\": \"\"}})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});//,\"password\": {\"$gt\": \"\"}})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\", \"password\": \"abcd\" || 1==1})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\" || 1==1, \"password\": {\"$ne\": \"\"}})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"; return true;//, \"password\": {\"$ne\": \"\"}})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.user.insert([\"username\"=>\"user\",\"password\"=>\"12345678\"])//, \"password\": {\"$ne\": \"\"}})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.update({username:\"admin\"},{username:\"admin\",password:\"12345678\"},{ upsert: true })//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.deleteOne({username:\"admin\"})//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.deleteMany({username:\"admin\"})//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.drop()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.remove(username:\"admin\")//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.user.insertOne([\"username\"=>\"user\",\"password\"=>\"12345678\"])//, \"password\": {\"$ne\": \"\"}})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"; return 1;//, \"password\": {\"$ne\": \"\"}})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"; return 1==1;//, \"password\": {\"$ne\": \"\"}})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.updateOne({username:\"admin\"},{$set : {password:\"12345678\"}},{ upsert: true })//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.updateMany({username:\"admin\"},{$set : {password:\"12345678\"}},{ upsert: true })//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.replaceOne({username:\"admin\"},{username:\"admin\", password:\"12345678\"},{ upsert: true })//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.findOneAndDelete({username:\"admin\"})//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.findOneAndReplace({username:\"admin\"},{username:\"admin\", password:\"12345678\"})//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.findOneAndUpdate({username:\"admin\"},{username:\"admin\", password:\"12345678\"})//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.orders.group({key: { ord_dt: 1, 'item.sku': 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function ( curr, result ) { },initial: { }})",
"label": 0
},
{
"text": "db.orders.group({key: { ord_dt: 1, 'item.sku': 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;},initial: { total : 0 }})",
"label": 0
},
{
"text": "db.orders.group({keyf: function(doc) {return { day_of_week: doc.ord_dt.getDay() };},cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;result.count++;},initial: { total : 0, count: 0 },finalize: function(result) {var weekdays = [\"Sunday\", \"Monday\", \"Tuesday\",\"Wednesday\", \"Thursday\",\"Friday\", \"Saturday\"];result.day_of_week = weekdays[result.day_of_week];result.avg = Math.round(result.total / result.count);}})",
"label": 0
},
{
"text": "db.orders.group({key: { ord_dt: 1 },cond: { ord_dt: { $lt: new Date( '01/01/2012' ) } },reduce: function ( curr, result ) { },initial: { }})",
"label": 0
},
{
"text": "db.orders.group({key: { ord_dt: 1, 'item.sku': 1 },,reduce: function ( curr, result ) { },initial: { }})",
"label": 0
},
{
"text": "db.orders.group({key: { ord_dt: 1, 'item.sku': 1 },cond: { },reduce: function ( curr, result ) { },initial: { }})",
"label": 0
},
{
"text": "db.orders.group({key: { ord_dt: 1, 'item.sku': 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.totalQuantity += curr.item.qty;result.totalPrice += curr.item.qty*curr.item.price;},initial: { totalQuantity : 0, totalPrice : 0 }})",
"label": 0
},
{
"text": "db.orders.group({keyf: function(doc) {return { day_of_week: doc.ord_dt.getDay() };},cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;result.count++;},initial: { total : 0, count: 0 }})",
"label": 0
},
{
"text": "db.orders.group({keyf: function(doc) {return { day_of_week: doc.ord_dt.getDay() };},cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;result.count++;},initial: { total : 0, count: 0 },finalize: function(result) {result.avg = Math.round(result.total / result.count);}})",
"label": 0
},
{
"text": "db.orders.group({key: { ord_dt: 1, 'item.sku': 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function ( curr, result ) { },initial: { },collation: { locale: \"fr\", strength: 1 }})",
"label": 0
},
{
"text": "db.orders.group({key: { ord_dt: 1, 'item.sku': 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;},initial: { total : 0 },collation: { locale: \"fr\", strength: 1 }})",
"label": 0
},
{
"text": "db.orders.group({keyf: function(doc) {return { day_of_week: doc.ord_dt.getDay() };},cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;result.count++;},initial: { total : 0, count: 0 },collation: { locale: \"fr\", strength: 1 }})",
"label": 0
},
{
"text": "db.collection.bulkWrite( [{ insertOne : { \"document\" : {username: \"user\", password: \"123456789\"} } }] )",
"label": 0
},
{
"text": "db.collection.bulkWrite( [{ updateOne :{\"filter\" : { \"document\" : {username: \"user\"} ,\"update\" : { \"document\" : {username:\"user\", password: \"123456789\"}}}] )",
"label": 0
},
{
"text": "db.collection.bulkWrite( [{ updateOne :{\"filter\" : { \"document\" : {username: \"user\"} ,\"update\" : { \"document\" : {username:\"user\", password: \"123456789\"} ,\"upsert\" : true}}] )",
"label": 0
},
{
"text": "db.collection.bulkWrite( [{ updateMany :{\"filter\" : { \"document\" : {username: \"user\"} ,\"update\" : { \"document\" : {username: \"user\", password: \"123456789\"}}}] )",
"label": 0
},
{
"text": "db.collection.bulkWrite( [{ updateMany :{\"filter\" : { \"document\" : {username: \"user\"} ,\"update\" : { \"document\" : {username: \"user\", password: \"123456789\"} ,\"upsert\" : true}}] )",
"label": 0
},
{
"text": "db.collection.bulkWrite( [{ replaceOne:{\"filter\" : { \"document\" : {username: \"user\"} ,\"replacement\" : { \"document\" : {username: \"user\", password: \"123456789\"}}}] )",
"label": 0
},
{
"text": "db.collection.bulkWrite( [{ replaceOne:{\"filter\" : { \"document\" : {username: \"user\"} ,\"replacement\" : { \"document\" : {username: \"user\", password: \"123456789\"} ,\"upsert\" : true}}] )",
"label": 0
},
{
"text": "db.collection.bulkWrite([{ deleteOne : { \"filter\" : {username: \"user\"} } }] )",
"label": 0
},
{
"text": "db.collection.bulkWrite([{ deleteMany : { \"filter\" : {username: \"user\"} } }] )",
"label": 0
},
{
"text": "try {db.characters.bulkWrite([{ insertOne :{\"document\" :{\"_id\" : 4, \"char\" : \"Dithras\", \"class\" : \"barbarian\", \"lvl\" : 4}}},{ insertOne :{\"document\" :{\"_id\" : 5, \"char\" : \"Taeln\", \"class\" : \"fighter\", \"lvl\" : 3}}},{ updateOne :{\"filter\" : { \"char\" : \"Eldon\" },\"update\" : { $set : { \"status\" : \"Critical Injury\" } }}},{ deleteOne :{ \"filter\" : { \"char\" : \"Brisbane\"} }},{ replaceOne :{\"filter\" : { \"char\" : \"Meldane\" },\"replacement\" : { \"char\" : \"Tanys\", \"class\" : \"oracle\", \"lvl\" : 4 }}}]);}catch (e) {print(e);}",
"label": 0
},
{
"text": "try {db.characters.bulkWrite([{ insertOne :{\"document\" :{\"_id\" : 4, \"char\" : \"Dithras\", \"class\" : \"barbarian\", \"lvl\" : 4}}},{ insertOne :{\"document\" :{\"_id\" : 4, \"char\" : \"Taeln\", \"class\" : \"fighter\", \"lvl\" : 3}}},{ updateOne :{\"filter\" : { \"char\" : \"Eldon\" },\"update\" : { $set : { \"status\" : \"Critical Injury\" } }}},{ deleteOne :{ \"filter\" : { \"char\" : \"Brisbane\"} }},{ replaceOne :{\"filter\" : { \"char\" : \"Meldane\" },\"replacement\" : { \"char\" : \"Tanys\", \"class\" : \"oracle\", \"lvl\" : 4 }}}],{ ordered : false });}catch (e) {print(e);}",
"label": 0
},
{
"text": "try {db.enemies.bulkWrite([{ updateMany :{\"filter\" : { \"rating\" : { $gte : 3} },\"update\" : { $inc : { \"encounter\" : 0.1 } }},},{ updateMany :{\"filter\" : { \"rating\" : { $lt : 2} },\"update\" : { $inc : { \"encounter\" : -0.25 } }},},{ deleteMany : { \"filter\" : { \"encounter\" { $lt : 0 } } } },{ insertOne :{\"document\" :{\"_id\" :5, \"char\" : \"ogrekin\" , \"rating\" : 2, \"encounter\" : 0.31}}}],{ writeConcern : { w : \"majority\", wtimeout : 100 } });}catch (e) {print(e);}",
"label": 0
},
{
"text": "db.stores.find( { $text: { $search: \"java coffee shop\" } } )",
"label": 0
},
{
"text": "db.stores.find({ $text: { $search: \"coffee shop cake\" } },{ score: { $meta: \"textScore\" } }).sort( { score: { $meta: \"textScore\" } } )",
"label": 0
},
{
"text": "db.articles.aggregate([{ $match: { $text: { $search: \"cake tea\" } } },{ $sort: { score: { $meta: \"textScore\" } } },{ $project: { title: 1, _id: 0 } }])",
"label": 0
},
{
"text": "db.articles.aggregate([{ $match: { $text: { $search: \"saber -claro\", $language: \"es\" } } },{ $group: { _id: null, views: { $sum: \"$views\" } } }])",
"label": 0
},
{
"text": "db.users.copyTo(\"copyUsers\")",
"label": 0
},
{
"text": "db.myColl.createIndex( { category: 1 }, { collation: { locale: \"fr\" } } )",
"label": 0
},
{
"text": "db.myColl.createIndex({ score: 1, price: 1, category: 1 },{ collation: { locale: \"fr\" } } )",
"label": 0
},
{
"text": "db.collection.createIndex({ category: 1 },{ name: \"category_fr\", collation: { locale: \"fr\", strength: 2 } })",
"label": 0
},
{
"text": "try {db.orders.deleteOne( { \"_id\" : ObjectId(\"563237a41a4d68582c2509da\") } );} catch (e) {print(e);}",
"label": 0
},
{
"text": "try {db.orders.deleteOne({ \"_id\" : ObjectId(\"563237a41a4d68582c2509da\") },{ w : \"majority\", wtimeout : 100 });} catch (e) {print (e);}",
"label": 0
},
{
"text": "db.myColl.deleteOne({ category: \"cafe\", status: \"A\" },{ collation: { locale: \"fr\", strength: 1 } })",
"label": 0
},
{
"text": "try {db.orders.deleteMany( { \"client\" : \"Crude Traders Inc.\" } );} catch (e) {print (e);}",
"label": 0
},
{
"text": "try {db.orders.deleteMany( { \"stock\" : \"Brent Crude Futures\", \"limit\" : { $gt : 48.88 } } );} catch (e) {print (e);}",
"label": 0
},
{
"text": "try {db.orders.deleteMany({ \"client\" : \"Crude Traders Inc.\" },{ w : \"majority\", wtimeout : 100 });} catch (e) {print (e);}",
"label": 0
},
{
"text": "db.myColl.deleteMany({ category: \"cafe\", status: \"A\" },{ collation: { locale: \"fr\", strength: 1 } })",
"label": 0
},
{
"text": "db.users.drop()",
"label": 0
},
{
"text": "db.pets.dropIndex( \"catIdx\" )",
"label": 0
},
{
"text": "db.pets.dropIndex( { \"cat\" : -1 } )",
"label": 0
},
{
"text": "db.bios.remove( { } )",
"label": 0
},
{
"text": "db.products.remove({ qty: { $gt: 20 } },{ writeConcern: { w: \"majority\", wtimeout: 5000 } })",
"label": 0
},
{
"text": "db.products.remove( { qty: { $gt: 20 } }, true )",
"label": 0
},
{
"text": "db.products.remove( { qty: { $gt: 20 }, $isolated: 1 } )",
"label": 0
},
{
"text": "db.myColl.remove({ category: \"cafe\", status: \"A\" },{ collation: { locale: \"fr\", strength: 1 } })",
"label": 0
},
{
"text": "db.rrecord.renameCollection(\"record\")",
"label": 0
},
{
"text": "db.rrecord.renameCollection(\"record\", true)",
"label": 0
},
{
"text": "db.collection.totalSize()",
"label": 0
},
{
"text": "db.inventory.find( { qty: { $mod: [ 4, 0 ] } } )",
"label": 0
},
{
"text": "db.users.find( { name: { $in: [ /^acme/i, /^ack/ ] } } )",
"label": 0
},
{
"text": "db.users.find( { name: { $regex: /acme.*corp/i, $nin: [ 'acmeblahcorp' ] } } )",
"label": 0
},
{
"text": "db.users.find( { name: { $regex: /acme.*corp/, $options: 'i', $nin: [ 'acmeblahcorp' ] } } )",
"label": 0
},
{
"text": "db.users.find( { name: { $regex: 'acme.*corp', $options: 'i', $nin: [ 'acmeblahcorp' ] } } )",
"label": 0
},
{
"text": "db.users.find( { name: { $regex: /acme.*corp/, $options: \"si\" } } )",
"label": 0
},
{
"text": "db.users.find( { name: { $regex: 'acme.*corp', $options: \"si\" } } )",
"label": 0
},
{
"text": "db.products.find( { sku: { $regex: /789$/ } } )",
"label": 0
},
{
"text": "db.products.find( { sku: { $regex: /^ABC/i } } )",
"label": 0
},
{
"text": "db.products.find( { description: { $regex: /^S/, $options: 'm' } } )",
"label": 0
},
{
"text": "db.products.find( { description: { $regex: /S/ } } )",
"label": 0
},
{
"text": "db.products.find( { description: { $regex: /m.*line/, $options: 'si' } } )",
"label": 0
},
{
"text": "var pattern = \"abc #category code\\n123 #item number\"; db.products.find( { sku: { $regex: pattern, $options: \"x\" } } )",
"label": 0
},
{
"text": "db.myCollection.find( { $where: \"this.credits == this.debits\" } );",
"label": 0
},
{
"text": "db.myCollection.find( { $where: \"obj.credits == obj.debits\" } );",
"label": 0
},
{
"text": "db.myCollection.find( { active: true, $where: \"this.credits - this.debits < 0\" } );",
"label": 0
},
{
"text": "db.articles.find( { tags: { $all: [ [ \"ssl\", \"security\" ] ] } } )",
"label": 0
},
{
"text": "db.articles.find( { $and: [ { tags: [ \"ssl\", \"security\" ] } ] } )",
"label": 0
},
{
"text": "db.articles.find( { tags: [ \"ssl\", \"security\" ] } )",
"label": 0
},
{
"text": "db.inventory.find( {qty: { $all: [{ \"$elemMatch\" : { size: \"M\", num: { $gt: 50} } },{ \"$elemMatch\" : { num : 100, color: \"green\" } }] }} )",
"label": 0
},
{
"text": "db.inventory.find( { \"qty.num\": { $all: [ 50 ] } } )",
"label": 0
},
{
"text": "db.inventory.find( { dim_cm: { $elemMatch: { $gt: 22, $lt: 30 } } } )",
"label": 0
},
{
"text": "db.inventory.find( { \"tags\": { $size: 3 } } )",
"label": 0
},
{
"text": "db.inventory.find( { \"instock\": { $elemMatch: { qty: { $gt: 10, $lte: 20 } } } } )",
"label": 0
},
{
"text": "db.scores.find({ results: { $elemMatch: { $gte: 80, $lt: 85 } } })",
"label": 0
},
{
"text": "db.survey.find({ results: { $elemMatch: { product: \"xyz\", score: { $gte: 8 } } } })",
"label": 0
},
{
"text": "db.survey.find({ results: { $elemMatch: { product: \"xyz\" } } })",
"label": 0
},
{
"text": "db.collection.save({ _id: 1, a: 54, binaryValueofA: \"00110110\" })",
"label": 0
},
{
"text": "db.collection.save({ _id: 2, a: 20, binaryValueofA: \"00010100\" }) ",
"label": 0
},
{
"text": "db.collection.save({ _id: 3, a: 20.0, binaryValueofA: \"00010100\" })",
"label": 0
},
{
"text": "db.collection.save({ _id: 4, a: BinData(0, \"Zg==\"), binaryValueofA: \"01100110\" })",
"label": 0
},
{
"text": "db.collection.find( { a: { $bitsAllClear: [ 1, 5 ] } } )",
"label": 0
},
{
"text": "db.collection.find( { a: { $bitsAllClear: 35 } } )",
"label": 0
},
{
"text": "db.collection.find( { a: { $bitsAllClear: BinData(0, \"ID==\") } } )",
"label": 0
},
{
"text": "db.collection.find( { a: { $bitsAllSet: [ 1, 5 ] } } )",
"label": 0
},
{
"text": "db.collection.find( { a: { $bitsAllSet: 50 } } )",
"label": 0
},
{
"text": "db.collection.find( { a: { $bitsAllSet: BinData(0, \"MC==\") } } )",
"label": 0
},
{
"text": "db.collection.find( { a: { $bitsAnyClear: [ 1, 5 ] } } )",
"label": 0
},
{
"text": "db.collection.find( { a: { $bitsAnyClear: 35 } } )",
"label": 0
},
{
"text": "db.collection.find( { a: { $bitsAnyClear: BinData(0, \"MC==\") } } )",
"label": 0
},
{
"text": "db.collection.find( { a: { $bitsAnySet: [ 1, 5 ] } } )",
"label": 0
},
{
"text": "db.collection.find( { a: { $bitsAnySet: 35 } } )",
"label": 0
},
{
"text": "db.collection.find( { a: { $bitsAnySet: BinData(0, \"MC==\") } } )",
"label": 0
},
{
"text": "db.records.find({x: { $mod: [ 2, 0 ] },$comment: \"Find even values.\"})",
"label": 0
},
{
"text": "db.records.aggregate( [{ $match: { x: { $gt: 0 }, $comment: \"Don't allow negative inputs.\" } },{ $group : { _id: { $mod: [ \"$x\", 2 ] }, total: { $sum: \"$x\" } } }] )",
"label": 0
},
{
"text": "db.students.find( { semester: 1, grades: { $gte: 85 } },{ \"grades.$\": 1 } )",
"label": 0
},
{
"text": "db.students.find({ \"grades.mean\": { $gt: 70 } },{ \"grades.$\": 1 })",
"label": 0
},
{
"text": "db.schools.find( { zipcode: \"63109\" },{ students: { $elemMatch: { school: 102 } } } )",
"label": 0
},
{
"text": "db.schools.find( { zipcode: \"63109\" },{ students: { $elemMatch: { school: 102, age: { $gt: 10} } } } )",
"label": 0
},
{
"text": "db.posts.find( {}, { comments: { $slice: 5 } } )",
"label": 0
},
{
"text": "db.posts.find( {}, { comments: { $slice: -5 } } )",
"label": 0
},
{
"text": "db.posts.find( {}, { comments: { $slice: [ 20, 10 ] } } )",
"label": 0
},
{
"text": "db.adminCommand( { \"killOp\": 1, \"op\": 724 } )",
"label": 0
},
{
"text": "db.adminCommand({renameCollection: \"test.orders\",to: \"test.orders-2016\"})",
"label": 0
},
{
"text": "db.adminCommand({createUser: \"bruce\",pwd: \"bruce123\",roles: [{ role: \"dbOwner\", db: \"admin\" }]})",
"label": 0
},
{
"text": "db.cloneCollection('mongodb.example.net:27017', 'users.profile',{ 'active' : true } )",
"label": 0
},
{
"text": "db.cloneDatabase(\"hostname\")",
"label": 0
},
{
"text": "db.copyDatabase('records', 'archive_records')",
"label": 0
},
{
"text": "db.copyDatabase(\"reporting\",\"reporting_copy\",\"example.net\",\"reportUser\",\"abc123\",\"MONGODB-CR\")",
"label": 0
},
{
"text": "db.createCollection( \"contacts\",{validator: { $or:[{ phone: { $type: \"string\" } },{ email: { $regex: /@mongodb\\.com$/ } },{ status: { $in: [ \"Unknown\", \"Incomplete\" ] } }]}})",
"label": 0
},
{
"text": "db.createCollection(\"users\",{ storageEngine: { wiredTiger: { configString: \"<option>=<setting>\" } } })",
"label": 0
},
{
"text": "db.killOp(6)",
"label": 0
},
{
"text": "db.logout()",
"label": 0
},
{
"text": "db.shutdownServer()",
"label": 0
},
{
"text": "db.repairDatabase()",
"label": 0
},
{
"text": "db.runCommand( {aggregate: \"articles\",pipeline: [{ $project: { tags: 1 } },{ $unwind: \"$tags\" },{ $group: { _id: \"$tags\", count: { $sum : 1 } } }],cursor: { }} )",
"label": 0
},
{
"text": "db.location.find( { \"town\": { \"$regex\": \"(Pine Lumber)\",\"$options\": 'i' } } ).maxTimeMS(30)",
"label": 0
},
{
"text": "db.runCommand( { distinct: \"collection\",key: \"city\",maxTimeMS: 45 } )",
"label": 0
},
{
"text": "db.currentOp(true)",
"label": 0
},
{
"text": "db.currentOp( { \"$all\": true } )",
"label": 0
},
{
"text": "db.currentOp({\"waitingForLock\" : true,$or: [{ \"op\" : { \"$in\" : [ \"insert\", \"update\", \"remove\" ] } },{ \"query.findandmodify\": { $exists: true } }]})",
"label": 0
},
{
"text": "db.currentOp({\"active\" : true,\"numYields\" : 0,\"waitingForLock\" : false})",
"label": 0
},
{
"text": "db.currentOp({\"active\" : true,\"secs_running\" : { \"$gt\" : 3 },\"ns\" : /^db1\\./})",
"label": 0
},
{
"text": "db.currentOp({$or: [{ op: \"command\", \"query.createIndexes\": { $exists: true } },{ op: \"none\", ns: /\\.system\\.indexes\\b/ }]})",
"label": 0
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.save({username:\"newUser\", password:\"12345678\"})//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.renameCollection(\"record\")//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.bulkWrite( [{ insertOne : { \"document\" :{\"username\":\"newUser\", \"password\":\"12345678\"} } }])//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.bulkWrite( [{ updateOne : { \"filter\" :{\"username\":\"admin\"} , \"update\" : {\"username\":\"newUser\", \"password\":\"12345678\"}} }])//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.bulkWrite( [{ updateMany: { \"filter\" :{\"username\":\"admin\"} , \"update\" : {\"username\":\"newUser\", \"password\":\"12345678\"}} }])//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.bulkWrite( [{ replaceOne : { \"filter\" :{\"username\":\"admin\"} , \"replacement\" : {\"username\":\"newUser\", \"password\":\"12345678\"}} }])//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.bulkWrite( [{ deleteOne : { \"filter\" :{\"username\":\"admin\"} } }])//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.bulkWrite( [{ deleteMany : { \"filter\" :{\"username\":\"admin\"} } }])//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.copyTo(newUser)//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.users.distinct( \"username\" )//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.cloneCollection('mongodb.example.net:27017', 'users.profile')//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.cloneDatabase(\"hostname\")//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.copyDatabase('records', 'archive_records')//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.createCollection(\"user\")//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.shutdownServer()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\", $where: \"1==1\"})//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\", \"password\": \"abcd\", $where: \"1==1\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\", $where: function(){return true}})//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\", $where: function(){return 1}})//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\", $where: \"this.password != \"\" \"})//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});sleep(10000);//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\", \"password\": \"abcd\"});sleep(10000);//\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"}); while(true){};//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\", \"password\": {$or: [{}, \"123456789\"]}})",
"label": 1
},
{
"text": "db.users.find({\"username\": {$or: [{}, \"admin\"]}, \"password\": {$or: [{}, \"123456789\"]}})",
"label": 1
},
{
"text": "db.myCollection.find( { $where: \"this.credits == this.debits || 1==1\" } );",
"label": 1
},
{
"text": "db.myCollection.find( { $where: \"this.credits == this.debits || this.credits != ''\" } );",
"label": 1
},
{
"text": "db.collection.find( { $query: { age : 25 } } )",
"label": 0
},
{
"text": "db.documents.find( { \"$query\": { query: { a: 1 } } } )",
"label": 0
},
{
"text": "db.collection.find( { $query: {age:{ $gt: 12 }}, $orderby: { age : -1 } } )",
"label": 0
},
{
"text": "db.products.update({ _id: 1 },{ $mul: { price: 1.25 } })",
"label": 0
},
{
"text": "db.products.update({ _id: 3 },{ $mul: { price: NumberInt(5) } })",
"label": 0
},
{
"text": "db.students.updateMany( {}, { $rename: { \"nmae\": \"name\" } } )",
"label": 0
},
{
"text": "db.students.update( { _id: 1 }, { $rename: { \"name.first\": \"name.fname\" } } )",
"label": 0
},
{
"text": "db.products.update({ _id: 1 }, {$set: { item: \"apple\" },$setOnInsert: { defaultQty: 100 } }, { upsert: true })",
"label": 0
},
{
"text": "db.users.update({ _id: 1 },{$currentDate: {lastModified: true,\"cancellation.date\": { $type: \"timestamp\" }},$set: { status: \"D\",\"cancellation.reason\": \"user request\"}})",
"label": 0
},
{
"text": "db.students.update({ name: \"joe\" },{ $push: { scores: { $each: [ 90, 92, 85 ] } } })",
"label": 0
},
{
"text": "db.inventory.update({ _id: 2 },{ $addToSet: { tags: { $each: [ \"camera\", \"electronics\", \"accessories\" ] } } } )",
"label": 0
},
{
"text": "db.students.update({ _id: 1 },{$push: {scores: {$each: [ 50, 60, 70 ],$position: 0}}})",
"label": 0
},
{
"text": "db.students.update({ _id: 1 },{$push: {scores: {$each: [ 20, 30 ],$position: 2}}})",
"label": 0
},
{
"text": "db.test.update({ _id: 1 },{ $addToSet: {letters: [ \"c\", \"d\" ] } })",
"label": 0
},
{
"text": "db.inventory.update({ _id: 1 },{ $addToSet: { tags: \"accessories\" } })",
"label": 0
},
{
"text": "db.students.update({ _id: 1 },{$push: {quizzes: {$each: [ { id: 3, score: 8 }, { id: 4, score: 7 },{ id: 5, score: 6 } ],$sort: { score: 1 }}}})",
"label": 0
},
{
"text": "db.students.update( { _id: 2 },{ $push: { tests: { $each: [ 40, 60 ], $sort: 1 } } })",
"label": 0
},
{
"text": "db.students.update({ _id: 5 },{$push: {quizzes: {$each: [ { wk: 5, score: 8 }, { wk: 6, score: 7}, { wk: 7, score: 6 } ],$sort: { score: -1 },$slice: 3}}})",
"label": 0
},
{
"text": "db.stores.update({ },{ $pull: { fruits: { $in: [ \"apples\", \"oranges\" ] }, vegetables: \"carrots\" } },{ multi: true })",
"label": 0
},
{
"text": "db.survey.update({ },{ $pull: { results: { answers: { $elemMatch: { q: 2, a: { $gte: 8 } } } } } },{ multi: true })",
"label": 0
},
{
"text": "db.students.update( { _id: 1 }, { $pop: { scores: -1 } } )",
"label": 0
},
{
"text": "db.students.update( { _id: 1 }, { $pop: { scores: 1 } } )",
"label": 0
},
{
"text": "db.switches.update({ _id: 1 },{ $bit: { expdata: { and: NumberInt(10) } } })",
"label": 0
},
{
"text": "db.switches.update({ _id: 2 },{ $bit: { expdata: { or: NumberInt(5) } } })",
"label": 0
},
{
"text": "db.switches.update({ _id: 3 },{ $bit: { expdata: { xor: NumberInt(5) } } })",
"label": 0
},
{
"text": "db.foo.update({ status : \"A\" , $isolated : 1 },{ $inc : { count : 1 } },{ multi: true })",
"label": 0
},
{
"text": "db.accounts.aggregate([{ $match: { status: \"A\" } },{$redact: {$cond: {if: { $eq: [ \"$level\", 5 ] },then: \"$$PRUNE\", else: \"$$DESCEND\"}}}]);",
"label": 0
},
{
"text": "db.inventory.aggregate([{$project:{item: 1,qty: 1,cmpTo250: {$cmp: [ \"$qty\", 250 ] },_id: 0}}])",
"label": 0
},
{
"text": "db.experiments.aggregate([{ $project: { A: 1, B: 1, sameElements: { $setEquals: [ \"$A\", \"$B\" ] }, _id: 0 } }])",
"label": 0
},
{
"text": "db.experiments.aggregate([{ $project: { A: 1, B: 1, commonToBoth: { $setIntersection: [ \"$A\", \"$B\" ] }, _id: 0 } }])",
"label": 0
},
{
"text": "db.experiments.aggregate([{ $project: { A:1, B: 1, allValues: { $setUnion: [ \"$A\", \"$B\" ] }, _id: 0 } }])",
"label": 0
},
{
"text": "db.experiments.aggregate([{ $project: { A: 1, B: 1, inBOnly: { $setDifference: [ \"$B\", \"$A\" ] }, _id: 0 } }])",
"label": 0
},
{
"text": "db.experiments.aggregate([{ $project: { A:1, B: 1, AisSubset: { $setIsSubset: [ \"$A\", \"$B\" ] }, _id:0 } }])",
"label": 0
},
{
"text": "db.survey.aggregate([{ $project: { responses: 1, isAnyTrue: { $anyElementTrue: [ \"$responses\" ] }, _id: 0 } }])",
"label": 0
},
{
"text": "db.survey.aggregate([{ $project: { responses: 1, isAllTrue: { $allElementsTrue: [ \"$responses\" ] }, _id: 0 } }])",
"label": 0
},
{
"text": "db.sales.aggregate( [{$project: {finalTotal: {$let: {vars: {total: { $add: [ '$price', '$tax' ] },discounted: { $cond: { if: '$applyDiscount', then: 0.9, else: 1 } }},in: { $multiply: [ \"$$total\", \"$$discounted\" ] }}}}}] )",
"label": 0
},
{
"text": "db.records.aggregate( [{ $project: { costsOneDollar: { $eq: [ \"$price\", { $literal: \"$1\" } ] } } }] )",
"label": 0
},
{
"text": "db.bids.aggregate( [{ $project: { item: 1, startAt: { $literal: 1 } } }] )",
"label": 0
},
{
"text": "db.records.find()",
"label": 0
},
{
"text": "db.records.find().pretty()",
"label": 0
},
{
"text": "db.collection.find({\"author\" : \"William Shakespeare\"})",
"label": 0
},
{
"text": "db.collection.find({\"color\" : \"red\"})",
"label": 0
},
{
"text": "db.collection.find({\"size\" : \"XXL\"})",
"label": 0
},
{
"text": "db.collection.find({\"id\" : \"207\"})",
"label": 0
},
{
"text": "db.collection.find({\"age\" : \"35\"})",
"label": 0
},
{
"text": "db.collection.find({\"city\" : \"London\"})",
"label": 0
},
{
"text": "db.collection.find({\"employee\" : \"john\"})",
"label": 0
},
{
"text": "db.collection.find({\"department\" : \"CSE\"}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"size\" : \"XXL\"}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"id\" : \"207\"}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"age\" : \"35\"}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"author\" : \"William Shakespeare\"}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$lt: 50}})",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$gt: 30}})",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$lte: 60}})",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$gte: 25}})",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$ne: 0}})",
"label": 0
},
{
"text": "db.collection.find({\"size\" : {$ne: \"XL\"}})",
"label": 0
},
{
"text": "db.collection.find({\"color\" : {$ne: \"Blue\"}})",
"label": 0
},
{
"text": "db.collection.find({\"id\" : {$ne: 1}})",
"label": 0
},
{
"text": "db.collection.find({\"id\" : {$lt: 100}})",
"label": 0
},
{
"text": "db.collection.find({\"id\" : {$gt: 20}})",
"label": 0
},
{
"text": "db.collection.find({\"id\" : {$lte: 85}})",
"label": 0
},
{
"text": "db.collection.find({\"id\" : {$gte: 42}})",
"label": 0
},
{
"text": "db.collection.find({\"size\" : {$ne: \"XL\"}}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"color\" : {$ne: \"Blue\"}}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"id\" : {$ne: 1}}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"id\" : {$lt: 100}}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$gt: 30}}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$lte: 60}}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"quantity\" : {$gte: 5}})",
"label": 0
},
{
"text": "db.collection.find({\"quantity\" : {$lte: 7}})",
"label": 0
},
{
"text": "db.collection.find({\"quantity\" : {$gt: 11}})",
"label": 0
},
{
"text": "db.collection.find({\"quantity\" : {$gt: 32}})",
"label": 0
},
{
"text": "db.collection.find({\"quantity\" : {$ne: 3}})",
"label": 0
},
{
"text": "db.collection.find({\"score\" : {$gte: 2}})",
"label": 0
},
{
"text": "db.collection.find({\"score\" : {$gt: 1}})",
"label": 0
},
{
"text": "db.collection.find({\"score\" : {$lte: 3}})",
"label": 0
},
{
"text": "db.collection.find({\"score\" : {$lt: 5}})",
"label": 0
},
{
"text": "db.collection.find({\"score\" : {$ne: 0}})",
"label": 0
},
{
"text": "db.collection.find({\"year\" : {$gte: 1960}})",
"label": 0
},
{
"text": "db.collection.find({\"year\" : {$gt: 1980}})",
"label": 0
},
{
"text": "db.collection.find({\"year\" : {$lte: 2010}})",
"label": 0
},
{
"text": "db.collection.find({\"year\" : {$lt: 2020}})",
"label": 0
},
{
"text": "db.collection.find({\"year\" : {$ne: 2000}})",
"label": 0
},
{
"text": "db.collection.find({\"year\" : {$gt: 1960, $lt: 2000}})",
"label": 0
},
{
"text": "db.collection.find({\"year\" : {$gte: 1950, $lt: 2005}})",
"label": 0
},
{
"text": "db.collection.find({\"year\" : {$gt: 1800, $lte: 1920}})",
"label": 0
},
{
"text": "db.collection.find({\"year\" : {$gte: 1900, $lte: 1975}})",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$gt: 20, $lt: 60}})",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$gte: 10, $lt: 30}})",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$gt: 25, $lte: 45}})",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$gte: 22, $lte: 57}})",
"label": 0
},
{
"text": "db.collection.find({\"year\" : {$lt: 2020}}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"year\" : {$ne: 2000}}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"year\" : {$gt: 1960, $lt: 2000}}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"year\" : {$gte: 1950, $lt: 2005}}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$gt: 25, $lte: 45}}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$gte: 22, $lte: 57}}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"product.ordered\" : \"36\"})",
"label": 0
},
{
"text": "db.collection.find({\"product.ordered\" : {$gt: 30}})",
"label": 0
},
{
"text": "db.collection.find({\"product.ordered\" : {$lt: 400}})",
"label": 0
},
{
"text": "db.collection.find({\"product.ordered\" : {$gte: 120}})",
"label": 0
},
{
"text": "db.collection.find({\"product.ordered\" : {$lte: 200}})",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": 8, \"ordered\": 12 })",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": {$lt: 8}, \"ordered\": 12 })",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": {$lte: 8}, \"ordered\": 12 })",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": {$gt: 8}, \"ordered\": 12 })",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": {$gte: 8}, \"ordered\": 12 })",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": 8, \"ordered\": {$lt: 12}})",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": 8, \"ordered\": {$lte: 12}})",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": 8, \"ordered\": {$gt: 12}})",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": 8, \"ordered\": {$gte: 12}})",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": {$gt: 8}, \"ordered\": {$lt: 12}})",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": {$gte: 12}, \"ordered\": {$lt: 12}})",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": {$gt: 8}, \"ordered\": {$lte: 12}})",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": {$gte: 8}, \"ordered\": {$lte: 12}})",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": {$lt: 8}, \"ordered\": {$gt: 12}})",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": {$lt: 8}, \"ordered\": {$gte: 12}})",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": {$lte: 8}, \"ordered\": {$gt: 12}})",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": {$lte: 8}, \"ordered\": {$gte: 12}})",
"label": 0
},
{
"text": "db.collection.find({\"product.ordered\" : {$lt: 400}}).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"product.ordered\" : {$gte: 120}}).pretty()",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": {$gt: 8}, \"ordered\": {$lt: 12}}).pretty()",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": 8, \"ordered\": 12 }).pretty()",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": {$lt: 8}, \"ordered\": 12 }).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"score\" : {$gte: 2}}).limit()",
"label": 0
},
{
"text": "db.collection.find({\"score\" : {$gt: 1}}).limit()",
"label": 0
},
{
"text": "db.collection.find({\"score\" : {$lte: 3}}).limit()",
"label": 0
},
{
"text": "db.collection.find({\"product.ordered\" : \"36\"}).limit(10)",
"label": 0
},
{
"text": "db.collection.find({\"product.ordered\" : {$gt: 30}}).limit(5)",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": 8, \"ordered\": {$gt: 12}}).limit(30)",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": 8, \"ordered\": {$gte: 12}}).limit(15)",
"label": 0
},
{
"text": "db.collection.find({\"year\" : {$lt: 2020}}).sort( {\"year\": 1} )",
"label": 0
},
{
"text": "db.collection.find({\"year\" : {$ne: 2000}}).sort( {\"year\": -1} )",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": {$lt: 8}, \"ordered\": 12 }).sort( {\"ordered\": 1} )",
"label": 0
},
{
"text": "db.collection.find(\"quantity\": { \"in_stock\": {$lte: 8}, \"ordered\": 12 }).sort( {\"ordered\": 1} )",
"label": 0
},
{
"text": "db.collection.find({\"id\" : {$ne: 1}}).sort( {\"id\": 1} ).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"id\" : {$lt: 100}}).sort( {\"id\": -1} ).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"product.ordered\" : \"36\"}).limit(10).sort( {\"product.ordered\": 1} )",
"label": 0
},
{
"text": "db.collection.find({\"product.ordered\" : {$gt: 30}}).limit(5).sort( {\"product.ordered\": -1} )",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$gt: 30}}).limit(10).sort( {\"age\": 1} )",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$gte: 10, $lt: 30}}).limit(10).sort( {\"age\": -1} )",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$gt: 25, $lte: 45}}).limit(10).sort( {\"age\": 1} )",
"label": 0
},
{
"text": "db.collection.find({\"age\" : {$gte: 22, $lte: 57}}).limit(10).sort( {\"age\": 1} ).pretty()",
"label": 0
},
{
"text": "db.collection.find({\"score\" : {$lte: 3}}).limit().sort( {\"score\": 1} )",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"author\": \"William Shakespeare\"}, {\"year\" : 1600}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"name\": \"john\"}, {\"age\" : 35}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"name\": \"john\"}, {\"city\" : \"London\"}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"product\": \"iPhone\"}, {\"year\": 2010] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"product.ordered\": \"20\"}, {\"price\" : 19.99}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"name\": \"john\"}, {\"age\" : {\"$lt\": 35}}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"name\": \"john\"}, {\"age\" : {\"$lte\": 35}}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"name\": \"john\"}, {\"age\" : {\"$gt\": 35}}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"name\": \"john\"}, {\"age\" : {\"$gte\": 35}}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"name\": \"john\"}, {\"age\" : {\"$ne\": 35}}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"quantity\": {\"$gt\": 20}}, {\"price\" : {\"$lt\": 100}}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"quantity\": {\"$gt\": 20}}, {\"price\" : {\"$lte\": 100}}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"quantity\": {\"$gte\": 20}}, {\"price\" : {\"$lt\": 100}}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"quantity\": {\"$gte\": 20}}, {\"price\" : {\"$lte\": 100}}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"quantity\": {\"$lt\": 20}}, {\"price\" : {\"$lt\": 100}}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"quantity\": {\"$lt\": 20}}, {\"price\" : {\"$lte\": 100}}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"quantity\": {\"$lte\": 20}}, {\"price\" : {\"$lt\": 100}}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"quantity\": {\"$lte\": 20}}, {\"price\" : {\"$lte\": 100}}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"name\": {\"$ne\": \"john\"}}, {\"age\" : {\"$gt\": 20}}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"name\": {\"$ne\": \"john\"}}, {\"age\" : {\"$gte\": 20}}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"name\": {\"$ne\": \"john\"}}, {\"age\" : {\"$lt\": 50}}] })",
"label": 0
},
{
"text": "db.collection.find({ $and: [{\"name\": {\"$ne\": \"john\"}}, {\"age\" : {\"$lte\": 50}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"author\": \"William Shakespeare\"}, {\"year\" : 1600}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"name\": \"john\"}, {\"age\" : 35}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"name\": \"john\"}, {\"city\" : \"London\"}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"product\": \"iPhone\"}, {\"year\": 2010] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"product.ordered\": \"20\"}, {\"price\" : 19.99}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"name\": \"john\"}, {\"age\" : {\"$lt\": 35}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"name\": \"john\"}, {\"age\" : {\"$lte\": 35}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"name\": \"john\"}, {\"age\" : {\"$gt\": 35}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"name\": \"john\"}, {\"age\" : {\"$gte\": 35}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"name\": \"john\"}, {\"age\" : {\"$ne\": 35}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"quantity\": {\"$gt\": 20}}, {\"price\" : {\"$lt\": 100}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"quantity\": {\"$gt\": 20}}, {\"price\" : {\"$lte\": 100}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"quantity\": {\"$gte\": 20}}, {\"price\" : {\"$lt\": 100}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"quantity\": {\"$gte\": 20}}, {\"price\" : {\"$lte\": 100}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"quantity\": {\"$lt\": 20}}, {\"price\" : {\"$lt\": 100}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"quantity\": {\"$lt\": 20}}, {\"price\" : {\"$lte\": 100}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"quantity\": {\"$lte\": 20}}, {\"price\" : {\"$lt\": 100}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"quantity\": {\"$lte\": 20}}, {\"price\" : {\"$lte\": 100}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"name\": {\"$ne\": \"john\"}}, {\"age\" : {\"$gt\": 20}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"name\": {\"$ne\": \"john\"}}, {\"age\" : {\"$gte\": 20}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"name\": {\"$ne\": \"john\"}}, {\"age\" : {\"$lt\": 50}}] })",
"label": 0
},
{
"text": "db.collection.find({ $or: [{\"name\": {\"$ne\": \"john\"}}, {\"age\" : {\"$lte\": 50}}] })",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : 100 }, { \"color\" : \"red\" } ] }, { $or : [ { \"size\" : \"M\" }, { \"ordered\" : 20 } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : \"red\" } ] }, { $or : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$lt\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$lte\": 100} }, { \"color\" : \"red\" } ] }, { $or : [ { \"size\" : \"M\" }, {\"ordered\" : {\"$lt\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$gt\": 100} }, { \"color\" : \"red\" } ] }, { $or : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$lt\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$gte\": 100} }, { \"color\" : \"red\" } ] }, { $or : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$lt\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : \"red\" } ] }, { $or : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$lte\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$lte\": 100} }, { \"color\" : \"red\" } ] }, { $or : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$lte\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$gt\": 100} }, { \"color\" : \"red\" } ] }, { $or : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$lte\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$gte\": 100} }, { \"color\" : \"red\" } ] }, { $or : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$lte\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : \"red\" } ] }, { $or : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$gt\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$gt\": 100} }, { \"color\" : \"red\" } ] }, { $or : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$gt\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$lte\": 100} }, { \"color\" : \"red\" } ] },{ $or : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$gte\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$gte\": 100} }, { \"color\" : \"red\" } ] }, { $or : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$gte\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : {\"$ne\": \"red\"} } ] }, { $or : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$gt\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : {\"$ne\": \"red\"} } ] }, { $or : [ { \"size\" : {\"$ne\": \"M\" }, { \"ordered\" : {\"$gt\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : \"red\" ] }, { $or : [ { \"size\" : {\"$ne\": \"M\" }, { \"ordered\" : {\"$gt\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : 100 }, { \"color\" : {\"$ne\": \"red\"} } ] }, { $or : [ { \"size\" : {\"$ne\": \"M\" }, { \"ordered\" : {\"$gt\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : {\"$ne\": \"red\"} } ] }, { $or : [ { \"size\" : {\"$ne\": \"M\" }, { \"ordered\" : 100 } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : 100 }, { \"color\" : {\"$ne\": \"red\"} } ] }, { $or : [ { \"size\" : {\"$ne\": \"M\" }, { \"ordered\" : 100 } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : 100 }, { \"color\" : \"red\" ] }, { $or : [ { \"size\" : {\"$ne\": \"M\" }, { \"ordered\" : {\"$gt\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : \"red\" ] }, { $or : [ { \"size\" : {\"$ne\": \"M\" }, { \"ordered\" : 100 } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : 100 }, { \"color\" : \"red\" ] }, { $or : [ { \"size\" : {\"$ne\": \"M\" }, { \"ordered\" : 100 } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : 100 }, { \"color\" : {\"$ne\": \"red\"} } ] }, { $or : [ { \"size\" : \"M\" }, {\"ordered\" : {\"$gt\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : {\"$ne\": \"red\"} } ] }, { $or : [ { \"size\" : \"M\" }, { \"ordered\" : 100 } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $and : [ { $or : [ { \"price\" : 100 }, { \"color\" : {\"$ne\": \"red\"} } ] }, { $or : [ { \"size\" : \"M\" }, { \"ordered\" : 100 } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : 100 }, { \"color\" : \"red\" } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : 20 } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : \"red\" } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$lt\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$lte\": 100} }, { \"color\" : \"red\" } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$lt\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$gt\": 100} }, { \"color\" : \"red\" } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$lt\": 100} } ] } ]} )",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$gte\": 100} }, { \"color\" : \"red\" } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$lt\": 100} } ] } ] )",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : \"red\" } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$lte\": 100} } ] } ] ) ",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$lte\": 100} }, { \"color\" : \"red\" } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$lte\": 100} } ] } ] ) ",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$gt\": 100} }, { \"color\" : \"red\" } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$lte\": 100} } ] } ] ) ",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$gte\": 100} }, { \"color\" : \"red\" } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$lte\": 100} } ] } ] ) ",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : \"red\" } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$gt\": 100} } ] } ] ) ",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$gt\": 100} }, { \"color\" : \"red\" } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$gt\": 100} } ] } ] ) ",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$lte\": 100} }, { \"color\" : \"red\" } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$gte\": 100} } ] } ] ) ",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$gte\": 100} }, { \"color\" : \"red\" } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$gte\": 100} } ] } ] ) ",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : {\"$ne\": \"red\"} } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$gt\": 100} } ] } ] )",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : {\"$ne\": \"red\"} } ] }, { $and : [ { \"size\" : {\"$ne\": \"M\" }, { \"ordered\" : {\"$gt\": 100} } ] } ] ) ",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : \"red\" ] }, { $and : [ { \"size\" : {\"$ne\": \"M\" }, { \"ordered\" : {\"$gt\": 100} } ] } ] ) ",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : 100 }, { \"color\" : {\"$ne\": \"red\"} } ] }, { $and : [ { \"size\" : {\"$ne\": \"M\" }, { \"ordered\" : {\"$gt\": 100} } ] } ] ) ",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : {\"$ne\": \"red\"} } ] }, { $and : [ { \"size\" : {\"$ne\": \"M\" }, { \"ordered\" : 100 } ] } ] ) ",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : 100 }, { \"color\" : {\"$ne\": \"red\"} } ] }, { $and : [ { \"size\" : {\"$ne\": \"M\" }, { \"ordered\" : 100 } ] } ] )",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : 100 }, { \"color\" : \"red\" ] }, { $and : [ { \"size\" : {\"$ne\": \"M\" }, { \"ordered\" : {\"$gt\": 100} } ] } ] )",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : \"red\" ] }, { $and : [ { \"size\" : {\"$ne\": \"M\" }, { \"ordered\" : 100 } ] } ] )",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : 100 }, { \"color\" : \"red\" ] }, { $and : [ { \"size\" : {\"$ne\": \"M\" }, { \"ordered\" : 100 } ] } ] )",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : 100 }, { \"color\" : {\"$ne\": \"red\"} } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : {\"$gt\": 100} } ] } ] )",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : {\"$lt\": 100} }, { \"color\" : {\"$ne\": \"red\"} } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : 100 } ] } ] )",
"label": 0
},
{
"text": "db.inventory.find( { $or : [ { $and : [ { \"price\" : 100 }, { \"color\" : {\"$ne\": \"red\"} } ] }, { $and : [ { \"size\" : \"M\" }, { \"ordered\" : 100 } ] } ] )",
"label": 0
},
{
"text": "db.car.findAndModify({ uery: { name: \"Alto\" }, ort: { cno: 1 }, pdate: { $inc: { speed: 10 } }, )",
"label": 0
},
{
"text": "db.car.findAndModify({ uery: { name: \"HondaCity\", color: \"Silver\", cno:\"H415\" ,speed: 25 }, ort: { cno: 1 }, pdate: { $inc: { speed: 20 } }, psert: true, ew: true )",
"label": 0
},
{
"text": "db.restaurants1.findAndModify({ query: { \"name\" : \"Douglaston Club\" }, sort: { cuisine: 1 }, update: { $inc: { \"age\": 1 } }, );",
"label": 0
},
{
"text": "db.restaurants1.findAndModify({ query: { \"name\" : \"Douglaston Club\" }, sort: { cuisine: 1 }, update: { $inc: { \"age\": 1 } }, new : true );",
"label": 0
},
{
"text": "db.restaurants1.findAndModify({ query: { \"name\" : \"Douglaston Club\" }, sort: { cuisine: 1 }, remove: true );",
"label": 0
},
{
"text": "db.collection('counter').findAndModify({ query: { _id: name }, update: { $inc: { next: 1} }, new: true, upsert: true }, function(err, doc){ console.log('the id is: '+doc.next); });",
"label": 0
},
{
"text": "db.restaurants1.findAndModify({ query: { \"name\" : \"Douglaston Club\" }, sort: { cuisine: 1 }, update: { $inc: { \"age\": 1 } }, new : true, upsert: true );",
"label": 0
},
{
"text": "db.restaurants1.findAndModify({ query: { \"name\" : \"Douglaston Club\" }, sort: { cuisine: 1 }, update: { $inc: { \"age\": 1 } }, upsert: true );",
"label": 0
},
{
"text": "db.car.findAndModify({ uery: { name: \"Alto\" }, ort: { cno: 1 }, pdate: { $inc: { speed: 10 } }, ew: true )",
"label": 0
},
{
"text": "db.car.findAndModify({ uery: { name: \"Alto\" }, ort: { cno: 1 }, pdate: { $inc: { speed: 10 } }, psert: true )",
"label": 0
},
{
"text": "db.car.findAndModify({ uery: { name: \"Alto\" }, ort: { cno: 1 }, pdate: { $inc: { speed: 10 } }, ew: true, psert: true )",
"label": 0
},
{
"text": "db.car.findAndModify({ uery: { name: \"Alto\" }, ort: { cno: 1 }, emove: true )",
"label": 0
},
{
"text": "db.car.findAndModify({ uery: { name: \"HondaCity\", color: \"Silver\", cno:\"H415\" ,speed: 25 }, ort: { cno: 1 }, pdate: { $inc: { speed: 20 } }, psert: true )",
"label": 0
},
{
"text": "db.car.findAndModify({ uery: { name: \"HondaCity\", color: \"Silver\", cno:\"H415\" ,speed: 25 }, ort: { cno: 1 }, pdate: { $inc: { speed: 20 } }, ew: true )",
"label": 0
},
{
"text": "db.car.findAndModify({ uery: { name: \"HondaCity\", color: \"Silver\", cno:\"H415\" ,speed: 25 }, ort: { cno: 1 }, pdate: { $inc: { speed: 20 } }, )",
"label": 0
},
{
"text": "db.car.findAndModify({ uery: { name: \"HondaCity\", color: \"Silver\", cno:\"H415\" ,speed: 25 }, ort: { cno: 1 }, emove: true )",
"label": 0
},
{
"text": "db.restaurants.stats()",
"label": 0
},
{
"text": "db.restaurants.stats( { scale : 1024 } )",
"label": 0
},
{
"text": "db.restaurant.stats( { indexDetails : true } )",
"label": 0
},
{
"text": "db.restaurants.stats( { 'indexDetails' : true, 'indexDetailsKey' : { 'borough' : 1, 'cuisine' : 1 } } ",
"label": 0
},
{
"text": "db.restaurants.stats( { 'indexDetails' : true, 'indexDetailsName' : 'borough_1_cuisine_1' } ",
"label": 0
},
{
"text": "db.products.update( { sku: \"unknown\" }, { $unset: { quantity: \"\", instock: \"\" } } ",
"label": 0
},
{
"text": "db.stores.update( { }, { $pull: { fruits: { $in: [ \"apples\", \"oranges\" ] }, vegetables: \"carrots\" } }, { multi: true } ",
"label": 0
},
{
"text": "db.profiles.update( { _id: 1 }, { $pull: { votes: { $gte: 6 } } } )",
"label": 0
},
{
"text": "db.survey.update( { }, { $pull: { results: { score: 8 , item: \"B\" } } }, { multi: true } ",
"label": 0
},
{
"text": "db.survey.update( { }, { $pull: { results: { $elemMatch: { score: 8 , item: \"B\" } } } }, { multi: true } ",
"label": 0
},
{
"text": "db.survey.update( { }, { $pull: { results: { answers: { $elemMatch: { q: 2, a: { $gte: 8 } } } } } }, { multi: true } ",
"label": 0
},
{
"text": "db.survey.update( { _id: 1 }, { $pullAll: { scores: [ 0, 5 ] } } )",
"label": 0
},
{
"text": "db.collection.update( { myArray: [ 5, 8 ] }, { $set: { \"myArray.$[]\": 10 } }, { upsert: true } ",
"label": 0
},
{
"text": "db.collection.update( { myArray: 5 }, { $set: { \"myArray.$[]\": 10 } }, { upsert: true } ",
"label": 0
},
{
"text": "db.collection.update( { }, { $set: { \"myArray.$[]\": 10 } }, { upsert: true } ",
"label": 0
},
{
"text": "db.students.update( { }, { $inc: { \"grades.$[]\": 10 } }, { multi: true } ",
"label": 0
},
{
"text": "db.students2.update( { }, { $inc: { \"grades.$[].std\" : -2 } }, { multi: true } ",
"label": 0
},
{
"text": "db.results.update( { \"grades\" : { $ne: 100 } }, { $inc: { \"grades.$[]\": 10 } }, { multi: true } ",
"label": 0
},
{
"text": "db.students3.update( {}, { $inc: { \"grades.$[].questions.$[score]\": 2 } }, { arrayFilters: [ { \"score\": { $gte: 8 } } ], multi: true} ",
"label": 0
},
{
"text": "db.students.updateOne( { _id: 1, grades: 80 }, { $set: { \"grades.$\" : 82 } } ",
"label": 0
},
{
"text": "db.students.updateOne( { _id: 4, \"grades.grade\": 85 }, { $set: { \"grades.$.std\" : 6 } } ",
"label": 0
},
{
"text": "db.students.updateOne( { _id: 5, grades: { $elemMatch: { grade: { $lte: 90 }, mean: { $gt: 80 } } } }, { $set: { \"grades.$.std\" : 6 } } ",
"label": 0
},
{
"text": "db.collection.update( { myArray: [ 0, 1 ] }, { $set: { \"myArray.$[element]\": 2 } }, { arrayFilters: [ { element: 0 } ], upsert: true } ",
"label": 0
},
{
"text": "db.array.update( { }, { $set: { \"myArray.$[element]\": 10 } }, { arrayFilters: [ { element: 9 } ], upsert: true } ",
"label": 0
},
{
"text": "db.students.update( { }, { $set: { \"grades.$[element]\" : 100 } }, { multi: true, arrayFilters: [ { \"element\": { $gte: 100 } } ] } ",
"label": 0
},
{
"text": "db.students2.update( { }, { $set: { \"grades.$[elem].mean\" : 100 } }, { multi: true, arrayFilters: [ { \"elem.grade\": { $gte: 85 } } ] } ",
"label": 0
},
{
"text": "db.students.update( { }, { $inc: { \"grades.$[elem].std\" : -1 } }, { arrayFilters: [ { \"elem.grade\": { $gte: 80 }, \"elem.std\": { $gt: 5 } } ], multi: true } ",
"label": 0
},
{
"text": "db.alumni.update( { }, { $set : { \"degrees.$[degree].gradcampaign\" : 1 } }, { arrayFilters : [ {\"degree.level\" : { $ne: \"Bachelor\" } } ], multi : true } ",
"label": 0
},
{
"text": "db.students3.update( {}, { $inc: { \"grades.$[t].questions.$[score]\": 2 } }, { arrayFilters: [ { \"t.type\": \"quiz\" } , { \"score\": { $gte: 8 } } ], multi: true} ",
"label": 0
},
{
"text": "db.students3.update( {}, { $inc: { \"grades.$[].questions.$[score]\": 2 } }, { arrayFilters: [ { \"score\": { $gte: 8 } } ], multi: true} ",
"label": 0
},
{
"text": "db.collection.update( { \"_id.name\": \"Robert Frost\", \"_id.uid\": 0 }, { \"categories\": [\"poet\", \"playwright\"] }, { upsert: true } )",
"label": 0
},
{
"text": "db.books.update( { _id: 1 }, { $inc: { stock: 5 }, $set: { item: \"ABC123\", \"info.publisher\": \"2222\", tags: [ \"software\" ], \"ratings.1\": { by: \"xyz\", rating: 3 } } } ",
"label": 0
},
{
"text": "db.books.update( { _id: 1 }, { $unset: { tags: 1 } } ) ",
"label": 0
},
{
"text": "db.books.update({_id: 2, item: \"XYZ123\", stock: 15, info: { publisher: \"5555\", pages: 150 }, tags: [ ], ratings: [ { by: \"xyz\", rating: 5, comment: \"ratings and reorder will go away after update\"} ], reorder: false })",
"label": 0
},
{
"text": "db.books.update( { item: \"XYZ123\" }, { item: \"XYZ123\", stock: 10, info: { publisher: \"2255\", pages: 150 }, tags: [ \"baking\", \"cooking\" ] } ",
"label": 0
},
{
"text": "db.books.update( { item: \"ZZZ135\" }, { item: \"ZZZ135\", stock: 5, tags: [ \"database\" ] }, { upsert: true } ",
"label": 0
},
{
"text": "db.books.update( { stock: { $lte: 10 } }, { $set: { reorder: true } }, { multi: true } ",
"label": 0
},
{
"text": "db.books.update( { stock: { $lte: 10 } }, { $set: { reorder: true } }, { multi: true, writeConcern: { w: \"majority\", wtimeout: 5000 } } ",
"label": 0
},
{
"text": "db.books.update( { item: \"EFG222\" }, { $set: { reorder: false, tags: [ \"literature\", \"translated\" ] } }, { upsert: true, multi: true } ",
"label": 0
},
{
"text": "db.myColl.update( { category: \"cafe\" }, { $set: { status: \"Updated\" } }, { collation: { locale: \"fr\", strength: 1 } } ;",
"label": 0
},
{
"text": "db.students.update( { grades: { $gte: 100 } }, { $set: { \"grades.$[element]\" : 100 } }, { multi: true, arrayFilters: [ { \"element\": { $gte: 100 } } ] } ",
"label": 0
},
{
"text": "db.students2.update( { }, { $set: { \"grades.$[elem].mean\" : 100 } }, { multi: true, arrayFilters: [ { \"elem.grade\": { $gte: 85 } } ] } ",
"label": 0
},
{
"text": "db.orders.aggregate([ { $match: { status: \"A\" } }, { $group: { _id: \"$cust_id\", total: { $sum: \"$amount\" } } }, { $sort: { total: -1 } } ])",
"label": 0
},
{
"text": "db.orders.aggregate( [ { $match: { status: \"A\" } }, { $group: { _id: \"$cust_id\", total: { $sum: \"$amount\" } } }, { $sort: { total: -1 } } ], { explain: true } )",
"label": 0
},
{
"text": "db.orders.aggregate( [ { $match: { status: \"A\" } }, { $group: { _id: \"$cust_id\", total: { $sum: \"$amount\" } } }, { $sort: { total: -1 } }, { $limit: 2 } ], { cursor: { batchSize: 0 } } )",
"label": 0
},
{
"text": "db.myColl.aggregate( [ { $match: { status: \"A\" } }, { $group: { _id: \"$category\", count: { $sum: 1 } } } ], { collation: { locale: \"fr\", strength: 1 } } ;",
"label": 0
},
{
"text": "db.foodColl.aggregate( [ { $sort: { qty: 1 }}, { $match: { category: \"cake\", qty: 10 } }, { $sort: { type: -1 } } ], { hint: { qty: 1, category: 1 } } ",
"label": 0
},
{
"text": "db.restaurants.aggregate( [ { $match: { rating: { $lt: 5 } } } ], { readConcern: { level: \"majority\" } } ",
"label": 0
},
{
"text": "db.movies.aggregate( [ { $match: { year : 1995 } } ], { comment : \"match_all_movies_from_1995\" } ).pretty()",
"label": 0
},
{
"text": "db.system.profile.find( { \"command.aggregate\": \"movies\", \"command.comment\" : \"match_all_movies_from_1995\" } ).sort( { ts : -1 } ).pretty() ",
"label": 0
},
{
"text": "db.products.update ({_id: 1, sku: \"abc123\", quantity: 10, metrics: { orders: 2, ratings: 3.5 } })",
"label": 0
},
{
"text": "db.products.update( { sku: \"abc123\" }, { $inc: { quantity: -2, \"metrics.orders\": 1 } } ",
"label": 0
},
{
"text": "db.scores.update( { _id: 1 }, { $min: { lowScore: 150 } } )",
"label": 0
},
{
"text": "db.scores.update( { _id: 1 }, { $min: { lowScore: 250 } } )",
"label": 0
},
{
"text": "db.tags.update( { _id: 1 }, { $min: { dateEntered: new Date(\"2013-09-25\") } } ",
"label": 0
},
{
"text": "db.scores.update( { _id: 1 }, { $max: { highScore: 950 } } )",
"label": 0
},
{
"text": "db.scores.update( { _id: 1 }, { $max: { highScore: 870 } } )",
"label": 0
},
{
"text": "db.tags.update( { _id: 1 }, { $max: { dateExpired: new Date(\"2013-09-30\") } } ",
"label": 0
},
{
"text": "db.products.update( { _id: 1 }, { $mul: { price: 1.25 } } ",
"label": 0
},
{
"text": "db.products.update( { _id: 2 }, { $mul: { price: NumberLong(100) } } ",
"label": 0
},
{
"text": "db.products.update( { _id: 3 }, { $mul: { price: NumberInt(5) } } ",
"label": 0
},
{
"text": "db.students.update( { _id: 1 }, { $rename: { 'nickname': 'alias', 'cell': 'mobile' } } )",
"label": 0
},
{
"text": "db.students.update( { _id: 1 }, { $rename: { 'wife': 'spouse' } } )",
"label": 0
},
{
"text": "db.products.update( { _id: 100 }, { $set: { quantity: 500, details: { model: \"14Q3\", make: \"xyz\" }, tags: [ \"coats\", \"outerwear\", \"clothing\" ] } } ",
"label": 0
},
{
"text": "db.products.update( { _id: 100 }, { $set: { \"details.make\": \"zzz\" } } ",
"label": 0
},
{
"text": "db.products.update( { _id: 100 }, { $set: { \"tags.1\": \"rain gear\", \"ratings.0.rating\": 2 } } ",
"label": 0
},
{
"text": "db.ratings.aggregate([ { $project: { delta: { $abs: { $subtract: [ \"$start\", \"$end\" ] } } } } )",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $project: { item: 1, total: { $add: [ \"$price\", \"$fee\" ] } } } ] ",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $project: { item: 1, billing_date: { $add: [ \"$date\", 3*24*60*60000 ] } } } ] ",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $group: { _id: { day: { $dayOfYear: \"$date\"}, year: { $year: \"$date\" } }, itemsSold: { $addToSet: \"$item\" } } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, qty: 1, result: { $and: [ { $gt: [ \"$qty\", 100 ] }, { $lt: [ \"$qty\", 250 ] } ] } } } ] ",
"label": 0
},
{
"text": "db.users.aggregate([ { $project: { name: 1, first: { $arrayElemAt: [ \"$favorites\", 0 ] }, last: { $arrayElemAt: [ \"$favorites\", -1 ] } } } )",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, dimensions: { $arrayToObject: \"$dimensions\" } } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $addFields: { instock: { $objectToArray: \"$instock\" } } }, { $addFields: { instock: { $concatArrays: [ \"$instock\", [ { \"k\": \"total\", \"v\": { $sum: \"$instock.v\" } } ] ] } } } , { $addFields: { instock: { $arrayToObject: \"$instock\" } } } )",
"label": 0
},
{
"text": "db.students.aggregate([ { $project: { quizAvg: { $avg: \"$quizzes\"}, labAvg: { $avg: \"$labs\" }, examAvg: { $avg: [ \"$final\", \"$midterm\" ] } } } )",
"label": 0
},
{
"text": "db.samples.aggregate([ { $project: { value: 1, ceilingValue: { $ceil: \"$value\" } } } )",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, qty: 1, cmpTo250: { $cmp: [ \"$qty\", 250 ] }, _id: 0 } } ] ",
"label": 0
},
{
"text": "db.warehouses.aggregate([ { $project: { items: { $concatArrays: [ \"$instock\", \"$ordered\" ] } } } )",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, discount: { $cond: { if: { $gte: [ \"$qty\", 250 ] }, then: 30, else: 20 } } } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, discount: { $cond: [ { $gte: [ \"$qty\", 250 ] }, 30, 20 ] } } } ] ",
"label": 0
},
{
"text": "db.sales.aggregate([  $project: { \"nycHour\": { $hour: { date: \"$date\", timezone: \"-05:00\" } }, \"nycMinute\": { $minute: { date: \"$date\", timezone: \"-05:00\" } }, \"gmtHour\": { $hour: { date: \"$date\", timezone: \"GMT\" } }, \"gmtMinute\": { $minute: { date: \"$date\", timezone: \"GMT\" } }, \"nycOlsonHour\": { $hour: { date: \"$date\", timezone: \"America/New_York\" } }, \"nycOlsonMinute\": { $minute: { date: \"$date\", timezone: \"America/New_York\" } } } ])",
"label": 0
},
{
"text": "db.sales.aggregate([  $project: { date: { $dateFromParts: { 'year' : 2017, 'month' : 2, 'day': 8, 'hour' : 12 } }, date_iso: { $dateFromParts: { 'isoWeekYear' : 2017, 'isoWeek' : 6, 'isoDayOfWeek' : 3, 'hour' : 12 } }, date_timezone: { $dateFromParts: { 'year' : 2016, 'month' : 12, 'day' : 31, 'hour' : 23, 'minute' : 46, 'second' : 12, 'timezone' : 'America/New_York' } } } ])",
"label": 0
},
{
"text": "db.sales.aggregate([ { $project: { date: { $dateToParts: { date: \"$date\" } }, date_iso: { $dateToParts: { date: \"$date\", iso8601: true } }, date_timezone: { $dateToParts: { date: \"$date\", timezone: \"America/New_York\" } } } ])",
"label": 0
},
{
"text": "db.logmessages.aggregate( [ { $project: { date: { $dateFromString: { dateString: '$date', timezone: 'America/New_York' } } }  ] )",
"label": 0
},
{
"text": "db.logmessages.aggregate( [ { $project: { date: { $dateFromString: { dateString: '$date', timezone: '$timezone' } } }  ] )",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $project: { yearMonthDayUTC: { $dateToString: { format: \"%Y-%m-%d\", date: \"$date\" } }, timewithOffsetNY: { $dateToString: { format: \"%H:%M:%S:%L%z\", date: \"$date\", timezone: \"America/New_York\"} }, timewithOffset430: { $dateToString: { format: \"%H:%M:%S:%L%z\", date: \"$date\", timezone: \"+04:30\" } }, minutesOffsetNY: { $dateToString: { format: \"%Z\", date: \"$date\", timezone: \"America/New_York\" } }, minutesOffset430: { $dateToString: { format: \"%Z\", date: \"$date\", timezone: \"+04:30\" } } } } ] ",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $project: { year: { $year: \"$date\" }, month: { $month: \"$date\" }, day: { $dayOfMonth: \"$date\" }, hour: { $hour: \"$date\" }, minutes: { $minute: \"$date\" }, seconds: { $second: \"$date\" }, milliseconds: { $millisecond: \"$date\" }, dayOfYear: { $dayOfYear: \"$date\" }, dayOfWeek: { $dayOfWeek: \"$date\" }, week: { $week: \"$date\" } } } ] ",
"label": 0
},
{
"text": "db.planning.aggregate( [ { $project: { name: 1, workdays: { $divide: [ \"$hours\", 8 ] } } } ] ",
"label": 0
},
{
"text": "db.collection.aggregate([ { \"$group\": { \"_id\": { \"checkType\": \"$_id.checkType\", \"resultCode\": \"$_id.resultCode\" }, \"count\": { \"$sum\": \"$count\" }, \"ctv\": { \"$sum\": \"$ctv\" }, \"details\": { \"$push\": \"$$ROOT\" } } }, { \"$project\": { \"count\": 1, \"details\": 1, \"ctv\": 1, \"perc\": { \"$multiply\": [ { \"$divide\": [\"$ctv\",\"$count\"] }, 100 ] }, \"weight\": { \"$divide\": [\"$ctv\", \"$count\"] }, } } )",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, qty: 1, qtyEq250: { $eq: [ \"$qty\", 250 ] }, _id: 0 } } ] ",
"label": 0
},
{
"text": "db.accounts.aggregate( [ { $project: { effectiveRate: { $subtract: [ { $exp: \"$rate\"}, 1 ] } } } ] ) ",
"label": 0
},
{
"text": "db.accounts.aggregate({ $filter: { input: [ 1, \"a\", 2, null, 3.1, NumberLong(4), \"5\" ], as: \"num\", cond: { $and: [ { $gte: [ \"$$num\", NumberLong(\"-9223372036854775807\") ] }, { $lte: [ \"$$num\", NumberLong(\"9223372036854775807\") ] } ] } } })",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $sort: { item: 1, date: 1 } }, { $group: { _id: \"$item\", firstSalesDate: { $first: \"$date\" } } } ] ",
"label": 0
},
{
"text": "db.samples.aggregate([ { $project: { value: 1, floorValue: { $floor: \"$value\" } } } )",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, qty: 1, qtyGt250: { $gt: [ \"$qty\", 250 ] }, _id: 0 } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, qty: 1, qtyGte250: { $gte: [ \"$qty\", 250 ] }, _id: 0 } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, description: { $ifNull: [ \"$description\", \"Unspecified\" ] } } } ] ",
"label": 0
},
{
"text": "db.fruit.aggregate([ { $project: { \"store location\" : \"$location\", \"has bananas\" : { $in: [ \"bananas\", \"$in_stock\" ] } } } )",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { index: { $indexOfArray: [ \"$items\", 2 ] }, } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { byteLocation: { $indexOfBytes: [ \"$item\", \"foo\" ] }, } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { cpLocation: { $indexOfCP: [ \"$item\", \"foo\" ] }, } } ] ",
"label": 0
},
{
"text": "db.warehouses.aggregate([ { $project: { items: { $cond: { if: { $and: [ { $isArray: \"$instock\" }, { $isArray: \"$ordered\" } ] }, then: { $concatArrays: [ \"$instock\", \"$ordered\" ] }, else: \"One or more fields is not an array.\" } } } } )",
"label": 0
},
{
"text": "db.dates.aggregate( [ { $project: { _id: 0, name: \"$name\", dayOfWeek: { $isoDayOfWeek: \"$birthday\" } } }  )",
"label": 0
},
{
"text": "db.deliveries.aggregate( [ { $project: { _id: 0, city: \"$city\", weekNumber: { $isoWeek: \"$date\" } } }  )",
"label": 0
},
{
"text": "db.anniversaries.aggregate( [ { $project: { yearNumber: { $isoWeekYear: \"$date\" } } }  )",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $sort: { item: 1, date: 1 } }, { $group: { _id: \"$item\", lastSalesDate: { $last: \"$date\" } } } ] ",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $project: { finalTotal: { $let: { vars: { total: { $add: [ '$price', '$tax' ] }, discounted: { $cond: { if: '$applyDiscount', then: 0.9, else: 1 } } }, in: { $multiply: [ \"$$total\", \"$$discounted\" ] } } } } }  )",
"label": 0
},
{
"text": "db.records.aggregate( [ { $project: { costsOneDollar: { $eq: [ \"$price\", { $literal: \"$1\" } ] } } }  )",
"label": 0
},
{
"text": "db.bids.aggregate( [ { $project: { item: 1, startAt: { $literal: 1 } } }  )",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $project: { x: \"$year\", y: { $ln: \"$sales\" } } } ] )",
"label": 0
},
{
"text": "db.examples.aggregate([ { $project: { bitsNeeded: { $floor: { $add: [ 1, { $log: [ \"$positiveInt\", 2 ] } ] } } } } )",
"label": 0
},
{
"text": "db.samples.aggregate( [ { $project: { pH: { $multiply: [ -1, { $log10: \"$H3O\" } ] } } }  )",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, qty: 1, qtyLt250: { $lt: [ \"$qty\", 250 ] }, _id: 0 } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, qty: 1, qtyLte250: { $lte: [ \"$qty\", 250 ] }, _id: 0 } } ] ",
"label": 0
},
{
"text": "db.grades.aggregate( [ { $project: { adjustedGrades: { $map: { input: \"$quizzes\", as: \"grade\", in: { $add: [ \"$$grade\", 2 ] } } } } } ] ",
"label": 0
},
{
"text": "db.deliveries.aggregate( [ { $project: { city: \"$city\", integerValues: { $map: { input: \"$distances\", as: \"integerValue\", in: { $trunc: \"$$integerValue\" } } } } } ] ",
"label": 0
},
{
"text": "db.temperatures.aggregate( [ { $project: { _id: 0, date: \"$date\", tempsStep1: { $map: { input: \"$temps\", as: \"tempInCelsius\", in: { $multiply: [ \"$$tempInCelsius\", 9/5 ] } } } } }, { $project: { date: \"$date\", \"temps in Fahrenheit\": { $map: { input: \"$tempsStep1\", as: \"tempStep1\", in: { $add: [ \"$$tempStep1\", 32 ] } } } } } ] ",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $group: { _id: \"$item\", maxTotalAmount: { $max: { $multiply: [ \"$price\", \"$quantity\" ] } }, maxQuantity: { $max: \"$quantity\" } } } ] ",
"label": 0
},
{
"text": "db.students.aggregate([ { $project: { quizMax: { $max: \"$quizzes\"}, labMax: { $max: \"$labs\" }, examMax: { $max: [ \"$final\", \"$midterm\" ] } } } )",
"label": 0
},
{
"text": "db.orders.aggregate([ { $lookup: { from: \"items\", localField: \"item\", // field in the orders collection foreignField: \"item\", // field in the items collection as: \"fromItems\" } }, { $replaceRoot: { newRoot: { $mergeObjects: [ { $arrayElemAt: [ \"$fromItems\", 0 ] }, \"$$ROOT\" ] } } }, { $project: { fromItems: 0 } } )",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $group: { _id: \"$item\", mergedSales: { $mergeObjects: \"$quantity\" } } } )",
"label": 0
},
{
"text": "db.articles.aggregate( [ { $match: { $text: { $search: \"cake\" } } }, { $group: { _id: { $meta: \"textScore\" }, count: { $sum: 1 } } } ] ",
"label": 0
},
{
"text": "db.articles.aggregate( [ { $match: { $text: { $search: \"cake\" } } }, { $group: { _id: { $meta: \"textScore\" }, count: { $sum: 1 } } } ] ",
"label": 0
},
{
"text": "db.students.aggregate([ { $project: { quizMin: { $min: \"$quizzes\"}, labMin: { $min: \"$labs\" }, examMin: { $min: [ \"$final\", \"$midterm\" ] } } } )",
"label": 0
},
{
"text": "db.planning.aggregate( [ { $project: { remainder: { $mod: [ \"$hours\", \"$tasks\" ] } } } ] ",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $project: { date: 1, item: 1, total: { $multiply: [ \"$price\", \"$quantity\" ] } } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, qty: 1, qtyNe250: { $ne: [ \"$qty\", 250 ] }, _id: 0 } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, result: { $not: [ { $gt: [ \"$qty\", 250 ] } ] } } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, dimensions: { $objectToArray: \"$dimensions\" } } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate([ { $project: { warehouses: { $objectToArray: \"$instock\" } } }, { $unwind: \"$warehouses\" }, { $group: { _id: \"$warehouses.k\", total: { $sum: \"$warehouses.v\" } } } )",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $addFields: { instock: { $objectToArray: \"$instock\" } } }, { $addFields: { instock: { $concatArrays: [ \"$instock\", [ { \"k\": \"total\", \"v\": { $sum: \"$instock.v\" } } ] ] } } } , { $addFields: { instock: { $arrayToObject: \"$instock\" } } }  )",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, result: { $or: [ { $gt: [ \"$qty\", 250 ] }, { $lt: [ \"$qty\", 200 ] } ] } } } ] ",
"label": 0
},
{
"text": "db.quizzes.aggregate([ { $project: { variance: { $pow: [ { $stdDevPop: \"$scores.score\" }, 2 ] } } } )",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $group: { _id: { day: { $dayOfYear: \"$date\"}, year: { $year: \"$date\" } }, itemsSold: { $push: { item: \"$item\", quantity: \"$quantity\" } } } } ] ",
"label": 0
},
{
"text": "db.distances.aggregate([{ $project: { _id: 0, city: 1, \"Rest stops\": { $range: [ 0, \"$distance\", 25 ] } } ])",
"label": 0
},
{
"text": "db.probability.aggregate( [ { $group: { _id: \"$experimentId\", \"probabilityArr\": { $push: \"$probability\" } } }, { $project: { \"description\": 1, \"results\": { $reduce: { input: \"$probabilityArr\", initialValue: 1, in: { $multiply: [ \"$$value\", \"$$this\" ] } } } } } ] ",
"label": 0
},
{
"text": "db.clothes.aggregate( [ { $project: { \"discountedPrice\": { $reduce: { input: \"$discounts\", initialValue: \"$price\", in: { $multiply: [ \"$$value\", { $subtract: [ 1, \"$$this\" ] } ] } } } } } ] ",
"label": 0
},
{
"text": "db.people.aggregate( [ // Filter to return only non-empty arrays { $match: { \"hobbies\": { $gt: [ ] } } }, { $project: { \"name\": 1, \"bio\": { $reduce: { input: \"$hobbies\", initialValue: \"My hobbies include:\", in: { $concat: [ \"$$value\", { $cond: { if: { $eq: [ \"$$value\", \"My hobbies include:\" ] }, then: \" \", else: \", \" } }, \"$$this\" ] } } } } } ] ",
"label": 0
},
{
"text": "db.arrayconcat.aggregate( [ { $project: { \"collapsed\": { $reduce: { input: \"$arr\", initialValue: [ ], in: { $concatArrays: [ \"$$value\", \"$$this\" ] } } } } } ] ",
"label": 0
},
{
"text": "db.arrayconcat.aggregate( [ { $project: { \"results\": { $reduce: { input: \"$arr\", initialValue: [ ], in: { \"collapsed\": { $concatArrays: [ \"$$value.collapsed\", \"$$this\" ] }, \"firstValues\": { $concatArrays: [ \"$$value.firstValues\", { $slice: [ \"$$this\", 1 ] } ] } } } } } } ] ",
"label": 0
},
{
"text": "db.users.aggregate([ { $project: { name: 1, reverseFavorites: { $reverseArray: \"$favorites\" } } } )",
"label": 0
},
{
"text": "db.experiments.aggregate( [ { $project: { A: 1, B: 1, inBOnly: { $setDifference: [ \"$B\", \"$A\" ] }, _id: 0 } } ] ",
"label": 0
},
{
"text": "db.experiments.aggregate( [ { $project: { A: 1, B: 1, sameElements: { $setEquals: [ \"$A\", \"$B\" ] }, _id: 0 } } ] ",
"label": 0
},
{
"text": "db.experiments.aggregate( [ { $project: { A: 1, B: 1, commonToBoth: { $setIntersection: [ \"$A\", \"$B\" ] }, _id: 0 } } ] ",
"label": 0
},
{
"text": "db.experiments.aggregate( [ { $project: { A:1, B: 1, AisSubset: { $setIsSubset: [ \"$A\", \"$B\" ] }, _id:0 } } ] ",
"label": 0
},
{
"text": "db.experiments.aggregate( [ { $project: { A:1, B: 1, allValues: { $setUnion: [ \"$A\", \"$B\" ] }, _id: 0 } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, numberOfColors: { $size: \"$colors\" } } } ] ",
"label": 0
},
{
"text": "db.users.aggregate([ { $project: { name: 1, threeFavorites: { $slice: [ \"$favorites\", 3 ] } } } )",
"label": 0
},
{
"text": "db.deliveries.aggregate([ { $project : { city_state : { $split: [\"$city\", \", \"] }, qty : 1 } }, { $unwind : \"$city_state\" }, { $match : { city_state : /[A-Z]{2}/ } }, { $group : { _id: { \"state\" : \"$city_state\" }, total_qty : { \"$sum\" : \"$qty\" } } }, { $sort : { total_qty : -1 } } );",
"label": 0
},
{
"text": "db.points.aggregate([ { $project: { distance: { $sqrt: { $add: [ { $pow: [ { $subtract: [ \"$p2.y\", \"$p1.y\" ] }, 2 ] }, { $pow: [ { $subtract: [ \"$p2.x\", \"$p1.x\" ] }, 2 ] } ] } } } } )",
"label": 0
},
{
"text": "db.users.aggregate([ { $group: { _id: \"$quiz\", stdDev: { $stdDevPop: \"$score\" } } } )",
"label": 0
},
{
"text": "db.quizzes.aggregate([ { $project: { stdDev: { $stdDevPop: \"$scores.score\" } } } )",
"label": 0
},
{
"text": "db.users.aggregate( [ { $sample: { size: 100 } }, { $group: { _id: null, ageStdDev: { $stdDevSamp: \"$age\" } } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, comparisonResult: { $strcasecmp: [ \"$quarter\", \"13q4\" ] } } } ] ",
"label": 0
},
{
"text": "db.food.aggregate( [ { $project: { \"name\": 1, \"length\": { $strLenBytes: \"$name\" } } } ] ",
"label": 0
},
{
"text": "db.food.aggregate( [ { $project: { \"name\": 1, \"length\": { $strLenCP: \"$name\" } } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, yearSubstring: { $substr: [ \"$quarter\", 0, 2 ] }, quarterSubtring: { $substr: [ \"$quarter\", 2, -1 ] } } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, yearSubstring: { $substrBytes: [ \"$quarter\", 0, 2 ] }, quarterSubtring: { $substrBytes: [ \"$quarter\", 2, { $subtract: [ { $strLenBytes: \"$quarter\" }, 2 ] } ] } } } ] ",
"label": 0
},
{
"text": "db.food.aggregate( [ { $project: { \"name\": 1, \"menuCode\": { $substrBytes: [ \"$name\", 0, 3 ] } } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: 1, yearSubstring: { $substrCP: [ \"$quarter\", 0, 2 ] }, quarterSubtring: { $substrCP: [ \"$quarter\", 2, { $subtract: [ { $strLenCP: \"$quarter\" }, 2 ] } ] } } } ] ",
"label": 0
},
{
"text": "db.food.aggregate( [ { $project: { \"name\": 1, \"menuCode\": { $substrCP: [ \"$name\", 0, 3 ] } } } ] ",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $project: { item: 1, total: { $subtract: [ { $add: [ \"$price\", \"$fee\" ] }, \"$discount\" ] } } } ] )",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $project: { item: 1, dateDifference: { $subtract: [ new Date(), \"$date\" ] } } } ] )",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $project: { item: 1, dateDifference: { $subtract: [ \"$date\", 5 * 60 * 1000 ] } } } ] )",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $group: { _id: { day: { $dayOfYear: \"$date\"}, year: { $year: \"$date\" } }, totalAmount: { $sum: { $multiply: [ \"$price\", \"$quantity\" ] } }, count: { $sum: 1 } } } ] ",
"label": 0
},
{
"text": "db.sales.aggregate( [ { $group: { _id: { day: { $dayOfYear: \"$date\"}, year: { $year: \"$date\" } }, totalAmount: { $sum: \"$qty\" }, count: { $sum: 1 } } } ] ",
"label": 0
},
{
"text": "db.students.aggregate([ { $project: { quizTotal: { $sum: \"$quizzes\"}, labTotal: { $sum: \"$labs\" }, examTotal: { $sum: [ \"$final\", \"$midterm\" ] } } } )",
"label": 0
},
{
"text": "db.grades.aggregate( [ { $project: { \"name\" : 1, \"summary\" : { $switch: { branches: [ { case: { $gte : [ { $avg : \"$scores\" }, 90 ] }, then: \"Doing great!\" }, { case: { $and : [ { $gte : [ { $avg : \"$scores\" }, 80 ] }, { $lt : [ { $avg : \"$scores\" }, 90 ] } ] }, then: \"Doing pretty well.\" }, { case: { $lt : [ { $avg : \"$scores\" }, 80 ] }, then: \"Needs improvement.\" } ], default: \"No scores found.\" } } } }  )",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: { $toLower: \"$item\" }, description: { $toLower: \"$description\" } } } ] ",
"label": 0
},
{
"text": "db.inventory.aggregate( [ { $project: { item: { $toUpper: \"$item\" }, description: { $toUpper: \"$description\" } } } ] ",
"label": 0
},
{
"text": "db.samples.aggregate([ { $project: { value: 1, truncatedValue: { $trunc: \"$value\" } } } )",
"label": 0
},
{
"text": "db.coll.aggregate([{ $project: { a : { $type: \"$a\" } } ])",
"label": 0
},
{
"text": "db.matrices.insertMany([ { matrix: [[1, 2], [2, 3], [3, 4]] }, { matrix: [[8, 7], [7, 6], [5, 4]] }, )",
"label": 0
},
{
"text": "db.matrices.aggregate([{ $project: { _id: false, transposed: { $zip: { inputs: [ { $arrayElemAt: [ \"$matrix\", 0 ] }, { $arrayElemAt: [ \"$matrix\", 1 ] }, { $arrayElemAt: [ \"$matrix\", 2 ] }, ] } } } ])",
"label": 0
},
{
"text": "db.pages.save( { \"category\": \"unix\", \"pages\": [ { \"title\": \"awk for beginners\", reviews: 5 }, { \"title\": \"sed for newbies\", reviews: 0 }, { \"title\": \"grep made simple\", reviews: 2 },  } )",
"label": 0
},
{
"text": "db.pages.aggregate([{ $project: { _id: false, pages: { $filter: { input: { $zip: { inputs: [ \"$pages\", { $range: [0, { $size: \"$pages\" }] } ] } }, as: \"pageWithIndex\", cond: { $let: { vars: { page: { $arrayElemAt: [ \"$$pageWithIndex\", 0 ] } }, in: { $gte: [ \"$$page.reviews\", 1 ] } } } } } } ])",
"label": 0
},
{
"text": "db.runCommand( { delete: \"orders\", deletes: [ { q: { status: \"D\" }, limit: 1 } ] } ",
"label": 0
},
{
"text": "db.runCommand( { delete: \"orders\", deletes: [ { q: { status: \"D\" }, limit: 0 } ], writeConcern: { w: \"majority\", wtimeout: 5000 } } ",
"label": 0
},
{
"text": "db.runCommand( { delete: \"orders\", deletes: [ { q: { }, limit: 0 } ], writeConcern: { w: \"majority\", wtimeout: 5000 } } ",
"label": 0
},
{
"text": "db.runCommand( { delete: \"orders\", deletes: [ { q: { status: \"D\" }, limit: 0 }, { q: { cust_num: 99999, item: \"abc123\", status: \"A\" }, limit: 1 } ], ordered: false, writeConcern: { w: 1 } }",
"label": 0
},
{
"text": "db.runCommand({ delete: \"myColl\", deletes: [ { q: { category: \"cafe\", status: \"a\" }, limit: 0, collation: { locale: \"fr\", strength: 1 } } ] )",
"label": 0
},
{
"text": "db.users.find({username: \"admin\", password: /.*/})",
"label": 1
},
{
"text": "db.users.find({username: \"admin\", password: {$nin: [/./]}})",
"label": 1
},
{
"text": "db.users.find({username: \"admin\", password: {$in: [/.*/]}})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: {$nin:[/./]}})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: /.*/i }})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: /.*/ }})",
"label": 1
},
{
"text": "db.users.find({username: \"admin\", password: /^x/})",
"label": 1
},
{
"text": "db.users.find({username: \"admin\", password: {$nin: [/^x/]}})",
"label": 1
},
{
"text": "db.users.find({username: \"admin\", password: {$in: [/^x/]}})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: {$nin: [/^x/]}})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: [/^x/i] }})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: [/^x/] }})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: [/^x/m] }})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: [/^x/x] }})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: [/^x/s] }})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: [/^xyz/] }})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: [/^aa/] }})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: [/^a.*z/] }})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: [/^a.*$/] }})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: '^a' }})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: '^abc' }})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: '^a', $option: 'i'}})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: '^abc', $option: 'm'}})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: '^xyz', $option: 'x'}})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: '^a.*', $option: 's'}})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: /^a.*$/, $option: 'i'}})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: /^xy$/, $option: 's'}})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: /^abc/, $option: 'x'}})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: /^xyz/, $option: 'm'}})",
"label": 1
},
{
"text": "db.users.find({Username: \"admin\", password: { $regex: /^ABC/, $option: 'i'}})",
"label": 1
},
{
"text": "db.users.find({ username: {\"$ne\": \"\"}, password: {$regex: /.*/} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$not\": \"\"}, password: {$regex: /.*/} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$gt\": \"\"}, password: {$regex: /.*/} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$gte\": \"\"}, password: {$regex: /.*/} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$ne\": null}, password: {$regex: /.*/} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$nin\": []}, password: {$regex: /.*/} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$nin\": [\"\"]}, password: {$regex: /.*/} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$ne\": \"\"}, password: {$regex: '.*'} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$not\": \"\"}, password: {$regex: '.*'} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$gt\": \"\"}, password: {$regex: '.*'} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$gte\": \"\"}, password: {$regex: '.*'} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$ne\": null}, password: {$regex: '.*'} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$nin\": []}, password: {$regex: '.*'} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$nin\": [\"\"]}, password: {$regex: '.*'} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$ne\": \"\"}, password: {$regex: /^abc/} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$not\": \"\"}, password: {$regex: /^abc/} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$gt\": \"\"}, password: {$regex: /^abc/} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$gte\": \"\"}, password: {$regex: /^abc/} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$ne\": null}, password: {$regex: /^abc/} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$nin\": []}, password: {$regex: /^abc/} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$nin\": [\"\"]}, password: {$regex: /^abc/} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$ne\": \"\"}, password: {$regex: /^ABC/i} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$not\": \"\"}, password: {$regex: /^ABC/i} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$gt\": \"\"}, password: {$regex: /^ABC/i} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$gte\": \"\"}, password: {$regex: /^ABC/i} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$ne\": null}, password: {$regex: /^ABC/i} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$nin\": []}, password: {$regex: /^ABC/i} })",
"label": 1
},
{
"text": "db.users.find({ username: {\"$nin\": [\"\"]}, password: {$regex: /^ABC/i} })",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.dropDatabase()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.fsyncLock()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.getCollection(\"auth\")//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.getCollectionInfos()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.getCollectionNames()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.getName()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.getSiblingDB('users')//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.hostInfo()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.isMaster()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.killOp()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.loadServerScripts()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.logout()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.printReplicationInfo()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.printShardingStatus()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.printSlaveReplicationInfo()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.serverBuildInfo()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.serverCmdLineOpts()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.serverStatus()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.setLogLevel(1)//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.setLogLevel(2, \"storage.journal\" )//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.stats()//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.find({\"username\": \"admin\"});db.stats(1024)//\", \"password\": \"abcd\"})",
"label": 1
},
{
"text": "db.users.mapReduce( function() { emit(this.name, this.password); }, function(name, password) { return password; }, { out: \"map_reduce_example\" } )//, 1); }, function(name, count) { return Array.sum(totalCount); }, { out: \"map_reduce_example\" } )",
"label": 1
},
{
"text": "db.users.mapReduce( function() { emit(this.name, this.password); }, function(name, password) { return password; }, { out: \"map_reduce_example\", query: {this.name: {\"$ne\": 0}} } )//, 1); }, function(name, count) { return Array.sum(totalCount); }, { out: \"map_reduce_example\" } )",
"label": 1
},
{
"text": "db.users.mapReduce( function() { emit(this.name, this.password); }, function(name, password) { return password; }, { out: \"map_reduce_example\", query: {this.name: {\"$gt\": \"\"}} } )//, 1); }, function(name, count) { return Array.sum(totalCount); }, { out: \"map_reduce_example\" } )",
"label": 1
},
{
"text": "db.users.mapReduce( function() { emit(this.name, this.password); }, function(name, password) { return password; }, { out: \"map_reduce_example\", query: {this.name: {\"$not\": \"\"}} } )//, 1); }, function(name, count) { return Array.sum(totalCount); }, { out: \"map_reduce_example\" } )",
"label": 1
},
{
"text": "db.users.mapReduce( function() { emit(this.name, this.password); }, function(name, password) { return password; }, { out: \"map_reduce_example\", query: {this.name: {\"$gt\": \"\"}}, sort: {this.name: 1} } )//, 1); }, function(name, count) { return Array.sum(totalCount); }, { out: \"map_reduce_example\" } )",
"label": 1
},
{
"text": "db.users.mapReduce( function() { emit(this.name, this.password); }, function(name, password) { return password; }, { out: \"map_reduce_example\", query: {this.name: {\"$gt\": \"\"}}, limit: 10 } )//, 1); }, function(name, count) { return Array.sum(totalCount); }, { out: \"map_reduce_example\" } )",
"label": 1
},
{
"text": "db.orders.mapReduce( function() { emit(this.cust_id, this.name); }, function(keyCustId, name) { return name; }, { out: \"map_reduce_example\" } )//this.price); }, function(keyCustId, valuesPrices) { return Array.sum(valuesPrices); }, { out: \"map_reduce_example\" } )",
"label": 1
},
{
"text": "db.orders.mapReduce( function() { emit(this.cust_id, this.name); }, function(keyCustId, name) { return name; }, { out: \"map_reduce_example\", query: {this.name: {\"$gt\": \"\"}} } )//this.price); }, function(keyCustId, valuesPrices) { return Array.sum(valuesPrices); }, { out: \"map_reduce_example\" } )",
"label": 1
},
{
"text": "db.orders.mapReduce( function() { emit(this.cust_id, this.name); }, function(keyCustId, name) { return name; }, { out: \"map_reduce_example\", query: {this.name: {\"$not\": \"\"}} } )//this.price); }, function(keyCustId, valuesPrices) { return Array.sum(valuesPrices); }, { out: \"map_reduce_example\" } )",
"label": 1
},
{
"text": "db.orders.mapReduce( function() { emit(this.cust_id, this.name); }, function(keyCustId, name) { return name; }, { out: \"map_reduce_example\", query: {this.name: {\"$ne\": \"\"}} } )//this.price); }, function(keyCustId, valuesPrices) { return Array.sum(valuesPrices); }, { out: \"map_reduce_example\" } )",
"label": 1
},
{
"text": "db.orders.mapReduce( function() { emit(this.cust_id, this.name); }, function(keyCustId, name) { return name; }, { out: \"map_reduce_example\", query: {this.name: {\"$gte\": \"\"}} } )//this.price); }, function(keyCustId, valuesPrices) { return Array.sum(valuesPrices); }, { out: \"map_reduce_example\" } )",
"label": 1
},
{
"text": "db.orders.mapReduce( function() { emit(this.cust_id, this.name); }, function(keyCustId, name) { return name; }, { out: \"map_reduce_example\", query: {this.name: {\"$gt\": \"\"}}, limit: 5 } )//this.price); }, function(keyCustId, valuesPrices) { return Array.sum(valuesPrices); }, { out: \"map_reduce_example\" } )",
"label": 1
},
{
"text": "db.orders.mapReduce( function() { emit(this.cust_id, this.name); }, function(keyCustId, name) { return name; }, { out: \"map_reduce_example\", query: {this.name: {\"$gt\": \"\"}}, sort: {this.name: 1} } )//this.price); }, function(keyCustId, valuesPrices) { return Array.sum(valuesPrices); }, { out: \"map_reduce_example\" } )",
"label": 1
},
{
"text": "db.posts.mapReduce( function() { emit(this.user_id,this.phoneno); }, function(key, values) {return  phoneno}, { query:{status:\"active\"}, out:\"user_phone\" })//1); }, function(key, values) {return  Array.sum(values)}, { query:{status:\"active\"}, out:\"post_total\" })",
"label": 1
},
{
"text": "db.posts.mapReduce( function() { emit(this.user_id,this.phoneno); }, function(key, values) {return  phoneno}, { out:\"user_phone\" })//1); }, function(key, values) {return  Array.sum(values)}, { query:{status:\"active\"}, out:\"post_total\" })",
"label": 1
},
{
"text": "db.posts.mapReduce( function() { emit(this.user_id,this.phoneno); }, function(key, values) {return  phoneno}, { limit: 20, out:\"user_phone\" })//1); }, function(key, values) {return  Array.sum(values)}, { query:{status:\"active\"}, out:\"post_total\" })",
"label": 1
},
{
"text": "db.posts.mapReduce( function() { emit(this.user_id,this.phoneno); }, function(key, values) {return  phoneno}, { sort: {this.user_id: 1}, out:\"user_phone\" })//1); }, function(key, values) {return  Array.sum(values)}, { query:{status:\"active\"}, out:\"post_total\" })",
"label": 1
},
{
"text": "db.doc.find({ username: \u2018tolkien\u2019, $or: [ {}, { \u2018a\u2019: \u2018a\u2019, password: \u2018\u2019 } ]})//\u2019})",
"label": 1
},
{
"text": "db.collection.find( { user: \u2018harris\u2019, $or : [ { a : 1 } , { b : /.*/ } ] } )//\u2019",
"label": 1
},
{
"text": "db.collection.find( { user: \u2018tomas\u2019, $or : [ { a : 1 } , { b : {$regex: /.*/ }} ] } )//\u2019",
"label": 1
},
{
"text": "db.admins.find({user:  \u2018rafid\u2019, $or:[{},{a: \u2018a\u2019,$and: [passcode: \u2018\u2019,validation_key: \u2018\u2019]}//\u2019 ]})",
"label": 1
},
{
"text": "{\"user\": \"{}\", \"password\": \"{}\"}",
"label": 0
},
{
"text": "{\"username\": {\"$regex\": \"^{}\"}}",
"label": 1
},
{
"text": "{\"username\": {\"$ne\": \"{}\"}}",
"label": 1
},
{
"text": "{\"username\": {\"$gt\": \"{}\"}}",
"label": 1
},
{
"text": "{\"user\": \"hacker\", \"password\": {\"$ne\": \"\"}}",
"label": 1
},
{
"text": "{\"user\": req.query.user, \"password\": req.query.password}",
"label": 0
},
{
"text": "{\"user\": \"hacker\", \"password\": {\"&ne\": \"\"}}",
"label": 1
},
{
"text": "{\"user\": req.params['user'], \"password\": req.params['password']}",
"label": 0
},
{
"text": "{\"user\": request.GET['user'], \"password\": request.GET['password']}",
"label": 0
},
{
"text": "{\"user\": req.query.user_id, \"password\": req.query.user_pass}",
"label": 0
},
{
"text": "{\"user\": req.params['user_id'], \"password\": req.params['user_pass']}",
"label": 0
},
{
"text": "db.users.find({\"user\": \"user123\", \"email\": \"user123@example.com\"})",
"label": 0
},
{
"text": "db.users.find({\"user\": request.GET['user'], \"password\": request.GET['password']})",
"label": 0
},
{
"text": "db['users'].find({:user => req.params['user'], :password => req.params['password']})",
"label": 0
},
{
"text": "db.collection('users').find({\"user\": \"hacker\", \"password\": {\"&ne\": \"\"}})",
"label": 1
},
{
"text": "}); db.dropDatabase(); db.insert({username: \u2018dummy \u2019, password: \u2018dummy\u2019",
"label": 1
},
{
"text": "{\"username\": {\"$eq\": \"admin\"}, \"password\": {\"$regex\": \"^md\" }}",
"label": 0
},
{
"text": "login[$nin][]=admin&login[$nin][]=test&pass[$ne]=toto",
"label": 1
},
{
"text": "login%255B%2524gt%255D%3Dadmin%26login%255B%2524lt%255D%3Dtest%26pass%255B%2524ne%255D%3D1",
"label": 1
},
{
"text": "{\"type\": \"user\",\"name\": \"oops\", \"roles\": [\"_admin\"], \"roles\": [], \"password\":\"apple\"}",
"label": 1
},
{
"text": "true, $where: '1 == 1'",
"label": 1
},
{
"text": "{\"$where\": \"this.username === '{}'\"}",
"label": 1
},
{
"text": "{\"$or\": [{\"username\": \"{}\"}, {\"isAdmin\": true}]}",
"label": 1
},
{
"text": "{ \"$or\": [ {}, { \"a\": \"a",
"label": 1
},
{
"text": "' } ], $comment:'successful MongoDB injection'",
"label": 1
},
{
"text": "{\"user\": \"alice\", \"password\": \"123456\"}",
"label": 0
},
{
"text": "{\"username\": {\"$regex\": \"^test\"}}",
"label": 0
},
{
"text": "{\"username\": {\"$ne\": \"testuser\"}}",
"label": 0
},
{
"text": "{\"username\": {\"$gt\": \"guest\"}}",
"label": 0
},
{
"text": "{\"user\": \"john\", \"password\": \"qwerty\"}",
"label": 0
},
{
"text": "{\"user\": req.query.name, \"password\": req.query.pass}",
"label": 0
},
{
"text": "{\"user\": req.params['name'], \"password\": req.params['pass']}",
"label": 0
},
{
"text": "{\"user\": request.GET['name'], \"password\": request.GET['pass']}",
"label": 0
},
{
"text": "db.users.find({\"user\": \"john\", \"age\": {\"$gt\": 25}})",
"label": 0
},
{
"text": "db.users.find({\"user\": \"user\", \"age\": {\"$gt\": 30}})",
"label": 0
},
{
"text": "db.users.find({\"user\": request.GET['name'], \"password\": request.GET['pass']})",
"label": 0
},
{
"text": "db['users'].find({:user => req.params['name'], :password => req.params['pass']})",
"label": 0
},
{
"text": "' && this.password.match(/.*/)//+%00",
"label": 1
},
{
"text": "' && this.passwordzz.match(/.*/)//+%00",
"label": 1
},
{
"text": "';it=new%20Date();do{pt=new%20Date();}while(pt-it<5000);",
"label": 1
},
{
"text": "';sleep(5000);",
"label": 1
},
{
"text": "0;return true;var%20password%20=%20this.password.match(/.*/);",
"label": 1
},
{
"text": "0;return true",
"label": 1
},
{
"text": "|| 1==1",
"label": 1
},
{
"text": "db.injection.insert({success:1});",
"label": 1
},
{
"text": "|| sleep(5)",
"label": 1
},
{
"text": "%27%3B%20return%20%27%27%20==%20%27",
"label": 1
},
{
"text": "login%5B%24gt%5D=admin&login%5B%24lt%5D=test&pass%5B%24ne%5D=1",
"label": 1
},
{
"text": "%27%20&&%20this.password.match%28%2F.%2A%2F%29%2F%2F%2B%2500",
"label": 1
},
{
"text": "db.injection.insert({success:1});",
"label": 1
},
{
"text": "|| sleep(5)",
"label": 1
},
{
"text": "|| 1==1",
"label": 1
},
{
"text": "0;return true;var%20password%20=%20this.password.match(/.*/);",
"label": 1
},
{
"text": "0;return true",
"label": 1
},
{
"text": "';it=new%20Date();do{pt=new%20Date();}while(pt-it<5000);",
"label": 1
},
{
"text": "';sleep(5000);",
"label": 1
},
{
"text": "|| this.password.match(/.*/)//+%00",
"label": 1
},
{
"text": "' && this.password.match(/.*/)//+%00",
"label": 1
},
{
"text": "' && this.passwordzz.match(/.*/)//+%00",
"label": 1
},
{
"text": "';it=new%20Date();do{pt=new%20Date();}while(pt-it<5000);",
"label": 1
},
{
"text": "';sleep(5000);",
"label": 1
},
{
"text": "0;return true;var%20password%20=%20this.password.match(/.*/);",
"label": 1
},
{
"text": "true, $where: '1 == 1'",
"label": 1
},
{
"text": "db.collection('users').find({:user => req.params['user'], :password => req.params['password']})",
"label": 0
},
{
"text": "this.hidden == false && this.category == ''; return '' == ''",
"label": 0
},
{
"text": "}); db.dropDatabase();",
"label": 1
},
{
"text": "{\"category\": \"electronics\"}",
"label": 0
},
{
"text": "{\"category\": \"electronics\", \"price\": {\"$gt\": 200}}",
"label": 0
},
{
"text": "{\"category\": \"electronics\", \"price\": {\"$gt\": 200}, \"name\": {\"$regex\": \"^S\"}}",
"label": 0
},
{
"text": "{}",
"label": 0
},
{
"text": "{\"selector\": {\"department\": \"engineering\"}}",
"label": 0
},
{
"text": "{\"_id\": \"001\", \"name\": \"John Doe\", \"department\": \"HR\", \"salary\": 50000}",
"label": 0
},
{
"text": "SELECT * FROM beer-sample WHERE city='' AND '1'='0' UNION SELECT * FROM system:keyspaces WHERE '1'='1'",
"label": 1
},
{
"text": "PartitionKey eq 'Customers' and RowKey eq '12345'",
"label": 0
},
{
"text": "PartitionKey eq 'Employees' and RowKey eq '44455' and Password eq 'password'",
"label": 0
},
{
"text": "PartitionKey eq 'Children' and RowKey eq '1253' and  Email eq 'email'",
"label": 0
},
{
"text": "PartitionKey eq 'Patients' and RowKey eq '15334' and Phone eq 'phone'",
"label": 0
},
{
"text": "0;var date=new Date(); do{curDate = new Date();}while(curDate-date<10000)",
"label": 1
},
{
"text": "{\"user\": \"{}\", \"password\": \"{}\"}",
"label": 0
},
{
"text": "{\"username\": {\"$regex\": \"^{}\"}}",
"label": 1
},
{
"text": "{\"username\": {\"$ne\": \"{}\"}}",
"label": 1
},
{
"text": "{\"username\": {\"$gt\": \"{}\"}}",
"label": 1
},
{
"text": "{\"user\": \"hacker\", \"password\": {\"$ne\": \"\"}}",
"label": 1
},
{
"text": "{\"user\": req.query.user, \"password\": req.query.password}",
"label": 0
},
{
"text": "{\"user\": \"hacker\", \"password\": {\"&ne\": \"\"}}",
"label": 1
},
{
"text": "{\"user\": req.params['user'], \"password\": req.params['password']}",
"label": 0
},
{
"text": "{\"user\": request.GET['user'], \"password\": request.GET['password']}",
"label": 0
},
{
"text": "db.users.find({\"user\": request.GET['user'], \"password\": request.GET['password']})",
"label": 0
},
{
"text": "db['users'].find({:user => req.params['user'], :password => req.params['password']})",
"label": 0
},
{
"text": "db.collection('users').find({\"user\": \"hacker\", \"password\": {\"&ne\": \"\"}})",
"label": 1
},
{
"text": "}); db.dropDatabase(); db.insert({username: \u2018dummy \u2019, password: \u2018dummy\u2019",
"label": 1
},
{
"text": "{\"username\": {\"$eq\": \"admin\"}, \"password\": {\"$regex\": \"^md\" }}",
"label": 0
},
{
"text": "login[$nin][]=admin&login[$nin][]=test&pass[$ne]=toto",
"label": 1
},
{
"text": "login%255B%2524gt%255D%3Dadmin%26login%255B%2524lt%255D%3Dtest%26pass%255B%2524ne%255D%3D1",
"label": 1
},
{
"text": "{\"type\": \"user\",\"name\": \"oops\", \"roles\": [\"_admin\"], \"roles\": [], \"password\":\"apple\"}",
"label": 1
},
{
"text": "db.users.find({\"name\": {\"$regex\": \"^j\"}})",
"label": 0
},
{
"text": "db.users.find({\"bio\": {\"$exists\": true, \"$ne\": \"\"}})",
"label": 0
},
{
"text": "true, $where: '1 == 1'",
"label": 1
},
{
"text": "{\"$where\": \"this.username === '{}'\"}",
"label": 1
},
{
"text": "{\"$or\": [{\"username\": \"{}\"}, {\"isAdmin\": true}]}",
"label": 1
},
{
"text": "{ \"$or\": [ {}, { \"a\": \"a",
"label": 1
},
{
"text": "' } ], $comment:'successful MongoDB injection'",
"label": 1
},
{
"text": "{\"user\": \"alice\", \"password\": \"123456\"}",
"label": 0
},
{
"text": "{\"username\": {\"$regex\": \"^test\"}}",
"label": 0
},
{
"text": "{\"username\": {\"$ne\": \"testuser\"}}",
"label": 0
},
{
"text": "{\"username\": {\"$gt\": \"guest\"}}",
"label": 0
},
{
"text": "{\"user\": \"john\", \"password\": \"qwerty\"}",
"label": 0
},
{
"text": "{\"user\": req.query.name, \"password\": req.query.pass}",
"label": 0
},
{
"text": "{\"user\": req.params['name'], \"password\": req.params['pass']}",
"label": 0
},
{
"text": "{\"user\": request.GET['name'], \"password\": request.GET['pass']}",
"label": 0
},
{
"text": "db.users.find({\"user\": \"john\", \"age\": {\"$gt\": 25}})",
"label": 0
},
{
"text": "db.users.find({\"user\": \"user\", \"age\": {\"$gt\": 30}})",
"label": 0
},
{
"text": "db.users.find({\"user\": request.GET['name'], \"password\": request.GET['pass']})",
"label": 0
},
{
"text": "db['users'].find({:user => req.params['name'], :password => req.params['pass']})",
"label": 0
},
{
"text": "' && this.password.match(/.*/)//+%00",
"label": 1
},
{
"text": "' && this.passwordzz.match(/.*/)//+%00",
"label": 1
},
{
"text": "';it=new%20Date();do{pt=new%20Date();}while(pt-it<5000);",
"label": 1
},
{
"text": "';sleep(5000);",
"label": 1
},
{
"text": "0;return true;var%20password%20=%20this.password.match(/.*/);",
"label": 1
},
{
"text": "0;return true",
"label": 1
},
{
"text": "|| 1==1",
"label": 1
},
{
"text": "db.injection.insert({success:1});",
"label": 1
},
{
"text": "%27%3B%20return%20%27%27%20==%20%27",
"label": 1
},
{
"text": "login%5B%24gt%5D=admin&login%5B%24lt%5D=test&pass%5B%24ne%5D=1",
"label": 1
},
{
"text": "%27%20&&%20this.password.match%28%2F.%2A%2F%29%2F%2F%2B%2500",
"label": 1
},
{
"text": "db.injection.insert({success:1});",
"label": 1
},
{
"text": "|| sleep(5)",
"label": 1
},
{
"text": "db.users.aggregate([{\"$group\": {\"_id\": \"$phone\", \"count\": {\"$sum\": 1}}}, {\"$match\": {\"count\": {\"$gt\": 1}}}])",
"label": 0
},
{
"text": "db.users.find().sort({\"status\": 1, \"age\": -1})",
"label": 0
},
{
"text": "db.users.find({\"login_count\": {\"$gt\": 10}, \"last_login\": {\"$gte\": ISODate(\"2023-06-01\")}})",
"label": 0
},
{
"text": "db.users.find({\"login_count\": {\"$gt\": 10}, \"last_login\": {\"$gte\": ISODate(\"2023-06-01\")}})",
"label": 0
},
{
"text": "db.users.remove({\"user\": \"user123\"})",
"label": 0
},
{
"text": "db.database.getIndexes()",
"label": 0
},
{
"text": "db.database.createIndex({\"user\": 1})",
"label": 0
},
{
"text": "db.database.stats()",
"label": 0
},
{
"text": "db.database.drop()",
"label": 0
},
{
"text": "db.database.insert({$where: \"this.user === \\\"admin\\\" && this.password === \\\"password\\\"}\"})",
"label": 1
},
{
"text": "db.database.update({\"user\": \"user123\"}, {\"$set\": {$where: \"this.password === \\\"new_password\\\"\"}})",
"label": 1
},
{
"text": "db.database.drop({$where: \"1 === 1\"})",
"label": 1
},
{
"text": "db.database.stats({$where: \"1 === 1\"})",
"label": 1
},
{
"text": "db.database.getIndexes({$where: \"1 === 1\"})",
"label": 1
},
{
"text": "db.database.createIndex({$where: \"this.user === \\\"user123\\\"})",
"label": 1
},
{
"text": "db.database.remove({$where: \"this.user === \\\"admin123\\\"\"})",
"label": 1
},
{
"text": "db.users.find({\"last_login\": {\"$gte\": ISODate(\"2023-07-01\")}})",
"label": 0
},
{
"text": "db.users.find({\"last_login\": {\"$lt\": ISODate(\"2023-05-25\")}})",
"label": 0
},
{
"text": "db.users.find().sort({\"age\": -1})",
"label": 0
},
{
"text": "db.users.find({\"status\": \"active\"})",
"label": 0
},
{
"text": "db.users.find({\"registration_date\": {\"$gte\": ISODate(\"2023-07-01\")}})",
"label": 0
},
{
"text": "db.users.find({\"profile_info\": null})",
"label": 0
},
{
"text": "db.users.find({\"user\": {\"$regex\": \"^A\"}})",
"label": 0
},
{
"text": "db.users.find({\"email\": {\"$exists\": true}})",
"label": 0
},
{
"text": "db.users.find({\"age\": {\"$gt\": 20, \"$lt\": 40}})",
"label": 0
},
{
"text": "db.users.find({\"role\": \"admin\"})",
"label": 0
},
{
"text": "0;return true;var%20password%20=%20this.password.match(/.*/);",
"label": 1
},
{
"text": "0;return true",
"label": 1
},
{
"text": "';it=new%20Date();do{pt=new%20Date();}while(pt-it<5000);",
"label": 1
},
{
"text": "';sleep(5000);",
"label": 1
},
{
"text": "|| this.password.match(/.*/)//+%00",
"label": 1
},
{
"text": "' && this.password.match(/.*/)//+%00",
"label": 1
},
{
"text": "' && this.passwordzz.match(/.*/)//+%00",
"label": 1
},
{
"text": "';it=new%20Date();do{pt=new%20Date();}while(pt-it<5000);",
"label": 1
},
{
"text": "';sleep(5000);",
"label": 1
},
{
"text": "0;return true;var%20password%20=%20this.password.match(/.*/);",
"label": 1
},
{
"text": "true, $where: '1 == 1'",
"label": 1
},
{
"text": "db.collection('users').find({:user => req.params['user'], :password => req.params['password']})",
"label": 0
},
{
"text": "this.hidden == false && this.category == ''; return '' == ''",
"label": 0
},
{
"text": "{\"category\": \"electronics\"}",
"label": 0
},
{
"text": "{\"category\": \"electronics\", \"price\": {\"$gt\": 200}}",
"label": 0
},
{
"text": "{\"category\": \"electronics\", \"price\": {\"$gt\": 200}, \"name\": {\"$regex\": \"^S\"}}",
"label": 0
},
{
"text": "{}",
"label": 0
},
{
"text": "{\"selector\": {\"department\": \"engineering\"}}",
"label": 0
},
{
"text": "{\"_id\": \"001\", \"name\": \"John Doe\", \"department\": \"HR\", \"salary\": 50000}",
"label": 0
},
{
"text": "SELECT * FROM beer-sample WHERE city='' AND '1'='0' UNION SELECT * FROM system:keyspaces WHERE '1'='1'",
"label": 1
},
{
"text": "PartitionKey eq 'Customers' and RowKey eq '12345'",
"label": 0
},
{
"text": "PartitionKey eq 'Employees' and RowKey eq '44455' and Password eq 'password'",
"label": 0
},
{
"text": "PartitionKey eq 'Children' and RowKey eq '1253' and  Email eq 'email'",
"label": 0
},
{
"text": "PartitionKey eq 'Patients' and RowKey eq '15334' and Phone eq 'phone'",
"label": 0
},
{
"text": "0;var date=new Date(); do{curDate = new Date();}while(curDate-date<10000)",
"label": 1
},
{
"text": "db.collection.find({$where: \"function() {return this.username.indexOf(\"admin\") !== -1}\"})",
"label": 1
},
{
"text": "db.collection.find({$or: [{\"status\": \"active\"}, {\"isAdmin\": true}]})",
"label": 1
},
{
"text": "db.collection.find({\"email\": {\"$regex\": \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"}})",
"label": 1
},
{
"text": "db.collection.find({$where: \"this.password.length >= 12\"})",
"label": 1
},
{
"text": "{\"user\": \"{}\", \"password\": \"pass\"}",
"label": 0
},
{
"text": "{\"user\": \"user\", \"password\": \"{}\"}",
"label": 0
},
{
"text": "{\"user\": \"admin\", \"password\": \"admin\"}",
"label": 0
},
{
"text": "{\"user\": \"testuser\", \"password\": \"testuser\"}",
"label": 0
},
{
"text": "{\"user\": \"$username\", \"password\": \"$password\"}",
"label": 0
},
{
"text": "{\"id\": {}, \"value\": 1}",
"label": 0
},
{
"text": "{\"name\": \"John\", \"age\": {}}",
"label": 0
},
{
"text": "{\"$where\": \"this.age >= {}\"}",
"label": 1
},
{
"text": "{\"user\": \"admin\", \"password\": {}}",
"label": 1
},
{
"text": "{\"user\": \"test\", \"password\": \"test\"}",
"label": 1
},
{
"text": "{\"user\": {\"$ne\": \"testuser\"}, \"password\": \"pass\"}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \"^test\"}}",
"label": 1
},
{
"text": "{\"user\": {\"$gt\": \"guest\"}, \"password\": \"pass\"}",
"label": 1
},
{
"text": "{\"type\": \"user\", \"name\": \"admin\", \"roles\": [\"_admin\"], \"password\": \"123456\"}",
"label": 1
},
{
"text": "{ \"$or\": [ {\"username\": \"admin\"}, {\"isAdmin\": true} ]}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \".*{}.*\"}}",
"label": 1
},
{
"text": "{\"user\": \"admin\", \"password\": {\"$nin\": [\"pass\", \"test\"]}}",
"label": 1
},
{
"text": "{\"$where\": \"this.username == '{}'\"}",
"label": 1
},
{
"text": "{\"user\": {\"$in\": [\"admin\", \"root\"]}, \"password\": \"password\"}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \"^{}$\", \"$options\": \"i\"}}",
"label": 1
},
{
"text": "{\"user\": {\"$exists\": true}, \"password\": {\"$exists\": true}}",
"label": 1
},
{
"text": "{\"user\": {\"$exists\": false}, \"password\": {\"$exists\": false}}",
"label": 1
},
{
"text": "{\"name\": {\"$not\": { \"$type\": \"string\" }}}",
"label": 1
},
{
"text": "{\"name\": {\"$mod\": [5, 0]}}",
"label": 1
},
{
"text": "{\"$where\": \"this.password.length > 10\"}",
"label": 1
},
{
"text": "{\"user\": \"test\", \"password\": \"pass\"}",
"label": 0
},
{
"text": "{\"name\": \"John Doe\", \"age\": {}}",
"label": 0
},
{
"text": "{\"$or\": [{\"username\": \"test\"}, {\"isAdmin\": false}]}",
"label": 0
},
{
"text": "{\"user\": \"guest\", \"password\": \"guest\"}",
"label": 0
},
{
"text": "{\"type\": \"admin\", \"name\": \"admin\", \"roles\": [\"admin\"], \"password\": \"admin\"}",
"label": 0
},
{
"text": "{ \"$and\": [ {\"username\": \"admin\"}, {\"isAdmin\": true} ]}",
"label": 0
},
{
"text": "{\"$nor\": [{\"username\": \"testuser\"}, {\"isAdmin\": false}]}",
"label": 1
},
{
"text": "{\"user\": {\"$size\": 3}, \"password\": \"123456\"}",
"label": 1
},
{
"text": "{\"$where\": \"this.age <= {}\"}",
"label": 1
},
{
"text": "{\"name\": {\"$type\": 2}}",
"label": 1
},
{
"text": "{\"name\": {\"$type\": 16}}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \"^test\", \"$options\": \"i\"}}",
"label": 1
},
{
"text": "{\"user\": \"guest\", \"password\": {\"$ne\": \"guest\"}}",
"label": 1
},
{
"text": "{\"user\": {\"$regex\": \"^{}$\"}, \"password\": \"pass\"}",
"label": 1
},
{
"text": "{\"username\": {\"$gt\": null}}",
"label": 1
},
{
"text": "{\"username\": {\"$exists\": false}, \"password\": {\"$exists\": true}}",
"label": 1
},
{
"text": "{\"name\": {\"$not\": { \"$type\": 3 }}}",
"label": 1
},
{
"text": "{\"name\": {\"$not\": { \"$type\": 18 }}}",
"label": 1
},
{
"text": "{\"$where\": \"this.password.length <= 5\"}",
"label": 1
},
{
"text": "{\"user\": \"test\", \"password\": \"password\"}",
"label": 0
},
{
"text": "{\"name\": \"Alice\", \"age\": {}}",
"label": 0
},
{
"text": "{\"$or\": [{\"username\": \"user\"}, {\"isAdmin\": true}]}",
"label": 0
},
{
"text": "{\"user\": \"john\", \"password\": \"qwerty\"}",
"label": 0
},
{
"text": "{\"type\": \"user\", \"name\": \"user\", \"roles\": [\"user\"], \"password\": \"user\"}",
"label": 0
},
{
"text": "{ \"$and\": [ {\"username\": \"test\"}, {\"isAdmin\": false} ]}",
"label": 0
},
{
"text": "{\"user\": [\"testuser\", \"admin\"], \"password\": \"password\"}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \"{}|admin\", \"$options\": \"i\"}}",
"label": 1
},
{
"text": "{\"$and\": [{\"username\": \"test\"}, {\"isAdmin\": false}] }",
"label": 1
},
{
"text": "{\"user\": {\"$size\": 1}, \"password\": \"test\"}",
"label": 1
},
{
"text": "{\"$where\": \"this.age > 20 && this.gender === 'male'\"}",
"label": 1
},
{
"text": "{\"name\": {\"$type\": 4}}",
"label": 1
},
{
"text": "{\"name\": {\"$type\": 17}}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \"^{}$\"}, \"password\": {\"$ne\": \"test\"}}",
"label": 1
},
{
"text": "{\"username\": {\"$gt\": null}, \"password\": {\"$eq\": \"password\"}}",
"label": 1
},
{
"text": "{\"name\": {\"$exists\": true}, \"password\": {\"$exists\": false}}",
"label": 1
},
{
"text": "{\"name\": {\"$not\": { \"$type\": 1 }}}",
"label": 1
},
{
"text": "{\"name\": {\"$not\": { \"$type\": 19 }}}",
"label": 1
},
{
"text": "{\"$where\": \"this.password.length > 8 && this.name === 'admin'\"}",
"label": 1
},
{
"text": "{\"user\": \"admin\", \"password\": \"admin\"}",
"label": 1
},
{
"text": "{\"user\": \"root\", \"password\": \"root\"}",
"label": 1
},
{
"text": "{\"user\": \"admin\", \"password\": \"password123\"}",
"label": 1
},
{
"text": "{\"user\": \"testuser\", \"password\": \"testuser123\"}",
"label": 1
},
{
"text": "{\"user\": \"test\", \"password\": \"test\"}",
"label": 0
},
{
"text": "{\"name\": \"Bob\", \"age\": {}}",
"label": 0
},
{
"text": "{\"$or\": [{\"username\": \"guest\"}, {\"isAdmin\": false}]}",
"label": 0
},
{
"text": "{\"user\": \"john\", \"password\": \"password123\"}",
"label": 0
},
{
"text": "{\"type\": \"user\", \"name\": \"user\", \"roles\": [\"user\"], \"password\": \"user\"}",
"label": 0
},
{
"text": "{ \"$and\": [ {\"username\": \"test\"}, {\"isAdmin\": false} ]}",
"label": 0
},
{
"text": "{\"user\": {\"$elemMatch\": {\"$eq\": \"admin\"}}, \"password\": {\"$ne\": \"test\"}}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \"{}.*admin.*\", \"$options\": \"i\"}}",
"label": 1
},
{
"text": "{\"$and\": [{\"username\": \"test\"}, {\"isAdmin\": true}] }",
"label": 1
},
{
"text": "{\"user\": {\"$size\": 2}, \"password\": \"123456\"}",
"label": 1
},
{
"text": "{\"$where\": \"this.age > 30 && this.gender === 'female'\"}",
"label": 1
},
{
"text": "{\"name\": {\"$type\": 5}}",
"label": 1
},
{
"text": "{\"name\": {\"$type\": 20}}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \"^{}$\", \"$options\": \"i\"}, \"password\": {\"$ne\": \"admin\"}}",
"label": 1
},
{
"text": "{\"username\": {\"$gt\": null}, \"password\": {\"$eq\": \"admin\"}}",
"label": 1
},
{
"text": "{\"name\": {\"$exists\": false}, \"password\": {\"$exists\": true}}",
"label": 1
},
{
"text": "{\"name\": {\"$not\": { \"$type\": 6 }}}",
"label": 1
},
{
"text": "{\"name\": {\"$not\": { \"$type\": 21 }}}",
"label": 1
},
{
"text": "{\"$where\": \"this.password.length > 12 && this.name === 'root'\"}",
"label": 1
},
{
"text": "{\"user\": \"admin\", \"password\": \"administrator\"}",
"label": 1
},
{
"text": "{\"user\": \"root\", \"password\": \"administrator\"}",
"label": 1
},
{
"text": "{\"user\": \"admin\", \"password\": \"admin123\"}",
"label": 1
},
{
"text": "{\"user\": \"testuser\", \"password\": \"testuser2023\"}",
"label": 1
},
{
"text": "{\"user\": \"test\", \"password\": \"pass123\"}",
"label": 0
},
{
"text": "{\"name\": \"Jane\", \"age\": {}}",
"label": 0
},
{
"text": "{\"$or\": [{\"username\": \"guest\"}, {\"isAdmin\": true}]}",
"label": 0
},
{
"text": "{\"user\": \"john\", \"password\": \"password2023\"}",
"label": 0
},
{
"text": "{\"type\": \"user\", \"name\": \"user\", \"roles\": [\"user\"], \"password\": \"secure123\"}",
"label": 0
},
{
"text": "{ \"$and\": [ {\"username\": \"user\"}, {\"isAdmin\": false} ]}",
"label": 0
},
{
"text": "{\"type\": \"user\", \"name\": \"user\", \"roles\": [\"user\"], \"password\": \"password2023\"}",
"label": 0
},
{
"text": "{ \"$and\": [ {\"username\": \"admin\"}, {\"isAdmin\": false} ]}",
"label": 0
},
{
"text": "{\"user\": \"malicious1\", \"password\": \"malicious1password\"}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \"^malicious2\"}}",
"label": 1
},
{
"text": "{\"user\": \"test\", \"password\": \"test{}\"}",
"label": 1
},
{
"text": "{\"user\": {\"$in\": [\"admin\", \"root\", \"hacker\"]}, \"password\": \"password\"}",
"label": 1
},
{
"text": "{\"user\": {\"$size\": 4}, \"password\": \"123456\"}",
"label": 1
},
{
"text": "{\"$where\": \"this.age > 25 && this.gender === 'male'\"}",
"label": 1
},
{
"text": "{\"name\": {\"$type\": 22}}",
"label": 1
},
{
"text": "{\"name\": {\"$type\": 23}}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \"^(malicious3|malicious4)\\\\d+\"}}",
"label": 1
},
{
"text": "{\"user\": {\"$eq\": \"admin\"}, \"password\": \"malicious5\"}",
"label": 1
},
{
"text": "{\"user\": {\"$regex\": \"^malicious6\"}}",
"label": 1
},
{
"text": "{\"$or\": [{\"isAdmin\": true}, {\"name\": {\"$regex\": \"^(malicious7|malicious8)\"}}]}",
"label": 1
},
{
"text": "{\"user\": \"malicious9\", \"password\": {\"$ne\": \"malicious9password\"}}",
"label": 1
},
{
"text": "{\"user\": {\"$in\": [\"admin\", \"root\", \"malicious10\"]}, \"password\": \"malicious10password\"}",
"label": 1
},
{
"text": "{\"user\": {\"$size\": 10}, \"password\": {\"$type\": 200}}",
"label": 1
},
{
"text": "{\"user\": {\"$regex\": \"^malicious23\"}, \"age\": {\"$exists\": true}}",
"label": 1
},
{
"text": "{\"user\": \"benign28\", \"name\": {\"$type\": 2}}",
"label": 0
},
{
"text": "{\"user\": \"benign27\", \"age\": {\"$exists\": true}}",
"label": 0
},
{
"text": "db.categories.createIndex({\"name\": 1})",
"label": 0
},
{
"text": "db.reviews.remove({\"user\": \"benign24\"})",
"label": 0
},
{
"text": "db.orders.insert({\"user\": \"user123\", \"product\": \"ProductA\", \"quantity\": 2})",
"label": 0
},
{
"text": "db.customers.update({\"user\": \"user123\"}, {\"$set\": {\"email\": \"new_email@example.com\"}})",
"label": 0
},
{
"text": "{\"user\": \"benign1\", \"password\": \"benign1password\"}",
"label": 0
},
{
"text": "{\"username\": {\"$regex\": \"^benign2\"}}",
"label": 0
},
{
"text": "{\"user\": \"test\", \"password\": \"test{}\"}",
"label": 0
},
{
"text": "{\"user\": {\"$in\": [\"guest\", \"user\", \"benign3\"]}, \"password\": \"password\"}",
"label": 0
},
{
"text": "{\"user\": {\"$size\": 5}, \"password\": \"123456\"}",
"label": 0
},
{
"text": "{\"$where\": \"this.age > 30 && this.gender === 'female'\"}",
"label": 0
},
{
"text": "{\"name\": {\"$type\": 24}}",
"label": 0
},
{
"text": "{\"name\": {\"$type\": 25}}",
"label": 0
},
{
"text": "{\"username\": {\"$regex\": \"^(benign4|benign5)\\\\d+\"}}",
"label": 0
},
{
"text": "{\"user\": {\"$eq\": \"user\"}, \"password\": \"benign6\"}",
"label": 0
},
{
"text": "{\"user\": {\"$regex\": \"^benign7\"}}",
"label": 0
},
{
"text": "{\"$or\": [{\"isAdmin\": false}, {\"name\": {\"$regex\": \"^(benign8|benign9)\"}}]}",
"label": 0
},
{
"text": "{\"user\": \"benign10\", \"password\": {\"$ne\": \"benign10password\"}}",
"label": 0
},
{
"text": "{\"user\": {\"$in\": [\"guest\", \"user\", \"benign11\"]}, \"password\": \"benign11password\"}",
"label": 0
},
{
"text": "{\"user\": \"malicious11\", \"password\": \"malicious11password\"}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \"^malicious12\"}}",
"label": 1
},
{
"text": "{\"user\": \"test\", \"password\": \"test123{}\"}",
"label": 1
},
{
"text": "{\"user\": {\"$in\": [\"admin\", \"root\", \"hacker\", \"malicious13\"]}, \"password\": \"password\"}",
"label": 1
},
{
"text": "{\"user\": {\"$size\": 6}, \"password\": \"123456\"}",
"label": 1
},
{
"text": "{\"$where\": \"this.age > 30 && this.gender === 'male' && this.status === 'active'\"}",
"label": 1
},
{
"text": "{\"name\": {\"$type\": 26}}",
"label": 1
},
{
"text": "{\"name\": {\"$type\": 27}}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \"^(malicious14|malicious15)\\\\d+\"}}",
"label": 1
},
{
"text": "{\"user\": {\"$eq\": \"admin\"}, \"password\": \"malicious16\"}",
"label": 1
},
{
"text": "{\"user\": {\"$regex\": \"^malicious17\"}}",
"label": 1
},
{
"text": "{\"$or\": [{\"isAdmin\": true}, {\"name\": {\"$regex\": \"^(malicious18|malicious19)\"}}]}",
"label": 1
},
{
"text": "{\"user\": \"malicious20\", \"password\": {\"$ne\": \"malicious20password\"}}",
"label": 1
},
{
"text": "{\"user\": {\"$in\": [\"admin\", \"root\", \"malicious21\", \"hacker\"]}, \"password\": \"malicious21password\"}",
"label": 1
},
{
"text": "{\"user\": \"benign12\", \"password\": \"benign12password\"}",
"label": 0
},
{
"text": "{\"username\": {\"$regex\": \"^benign13\"}}",
"label": 0
},
{
"text": "{\"user\": \"test\", \"password\": \"test456{}\"}",
"label": 0
},
{
"text": "{\"user\": {\"$in\": [\"guest\", \"user\", \"benign14\"]}, \"password\": \"password\"}",
"label": 0
},
{
"text": "{\"user\": {\"$size\": 7}, \"password\": \"123456\"}",
"label": 0
},
{
"text": "{\"$where\": \"this.age > 35 && this.gender === 'female' && this.status === 'active'\"}",
"label": 0
},
{
"text": "{\"name\": {\"$type\": 28}}",
"label": 0
},
{
"text": "{\"name\": {\"$type\": 29}}",
"label": 0
},
{
"text": "{\"username\": {\"$regex\": \"^(benign15|benign16)\\\\d+\"}}",
"label": 0
},
{
"text": "{\"user\": {\"$eq\": \"user\"}, \"password\": \"benign17\"}",
"label": 0
},
{
"text": "{\"user\": {\"$regex\": \"^benign18\"}}",
"label": 0
},
{
"text": "{\"$or\": [{\"isAdmin\": false}, {\"name\": {\"$regex\": \"^(benign19|benign20)\"}}]}",
"label": 0
},
{
"text": "{\"user\": \"benign21\", \"password\": {\"$ne\": \"benign21password\"}}",
"label": 0
},
{
"text": "{\"user\": {\"$in\": [\"guest\", \"user\", \"benign22\"]}, \"password\": \"benign22password\"}",
"label": 0
},
{
"text": "{\"$where\": \"this.age > 35 && this.gender === 'female' && this.isActive === true\"}",
"label": 1
},
{
"text": "{\"name\": {\"$type\": 30}}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \"^(malicious23|malicious24)\\\\d+\"}, \"isAdmin\": false}",
"label": 1
},
{
"text": "{\"user\": {\"$gt\": \"admin\"}, \"password\": \"maliciouspassword\"}",
"label": 1
},
{
"text": "{\"$or\": [{\"username\": \"malicious25\"}, {\"isAdmin\": true}]}",
"label": 1
},
{
"text": "{\"user\": \"malicious26\", \"password\": {\"$ne\": \"maliciouspassword\"}}",
"label": 1
},
{
"text": "{\"user\": {\"$in\": [\"admin\", \"root\", \"malicious27\", \"hacker\", \"test\"]}, \"password\": \"maliciouspassword\"}",
"label": 1
},
{
"text": "{\"$and\": [{\"username\": \"testuser\"}, {\"isAdmin\": false}] }",
"label": 0
},
{
"text": "{\"user\": {\"$size\": 9}, \"password\": \"benignpassword\"}",
"label": 0
},
{
"text": "{\"$where\": \"this.age > 40 && this.gender === 'male' && this.isActive === true\"}",
"label": 0
},
{
"text": "{\"name\": {\"$type\": 31}}",
"label": 0
},
{
"text": "{\"username\": {\"$regex\": \"^(benign23|benign24)\\\\d+\"}, \"isAdmin\": true}",
"label": 0
},
{
"text": "{\"user\": {\"$gt\": \"user\"}, \"password\": \"benignpassword\"}",
"label": 0
},
{
"text": "{\"$or\": [{\"username\": \"benign25\"}, {\"isAdmin\": false}]}",
"label": 0
},
{
"text": "{\"user\": \"benign26\", \"password\": {\"$ne\": \"benignpassword\"}}",
"label": 0
},
{
"text": "{\"user\": {\"$in\": [\"guest\", \"user\", \"Superuser\", \"test\"]}, \"password\": \"password123\"}",
"label": 0
},
{
"text": "{\"user\": {\"$elemMatch\": {\"$eq\": \"user\"}}, \"password\": {\"$ne\": \"test\"}}",
"label": 1
},
{
"text": "{\"user\": {\"$elemMatch\": {\"$eq\": \"guest\"}}, \"password\": {\"$ne\": \"guest\"}}",
"label": 1
},
{
"text": "{\"user\": {\"$elemMatch\": {\"$eq\": \"admin\"}}, \"password\": {\"$ne\": \"admin\"}}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \"^user\"}, \"isAdmin\": true}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \"^guest\"}, \"isAdmin\": true}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \"^admin\"}, \"isAdmin\": true}",
"label": 1
},
{
"text": "{\"user\": {\"$in\": [\"admin\", \"root\", \"hacker\", \"test\", \"guest\"]}, \"password\": \"password\"}",
"label": 1
},
{
"text": "{\"user\": {\"$in\": [\"user\", \"admin\", \"guest\", \"test\", \"hacker\"]}, \"password\": \"password\"}",
"label": 1
},
{
"text": "{\"user\": {\"$in\": [\"guest\", \"test\", \"user\", \"admin\", \"hacker\"]}, \"password\": \"password\"}",
"label": 1
},
{
"text": "{\"user\": {\"$size\": 8}, \"password\": \"123456\"}",
"label": 1
},
{
"text": "{\"user\": {\"$size\": 10}, \"password\": \"12345678\"}",
"label": 1
},
{
"text": "{\"name\": {\"$type\": 33}}",
"label": 0
},
{
"text": "{\"name\": {\"$type\": 34}}",
"label": 0
},
{
"text": "{\"username\": {\"$regex\": \"^(malicious28|malicious29)\\\\d+\"}, \"isAdmin\": false}",
"label": 1
},
{
"text": "{\"username\": {\"$regex\": \"^(malicious30|malicious31)\\\\d+\"}, \"isAdmin\": false}",
"label": 1
},
{
"text": "{\"user\": {\"$gt\": \"admin\"}, \"password\": \"maliciouspassword\"}",
"label": 1
},
{
"text": "{\"user\": {\"$gt\": \"user\"}, \"password\": \"maliciouspassword\"}",
"label": 1
},
{
"text": "{\"$or\": [{\"username\": \"malicious32\"}, {\"isAdmin\": true}]}",
"label": 1
},
{
"text": "{\"$or\": [{\"username\": \"malicious33\"}, {\"isAdmin\": true}]}",
"label": 1
},
{
"text": "{\"user\": \"malicious34\", \"password\": {\"$ne\": \"maliciouspassword\"}}",
"label": 1
},
{
"text": "{\"user\": \"malicious35\", \"password\": {\"$ne\": \"maliciouspassword\"}}",
"label": 1
},
{
"text": "{\"user\": {\"$in\": [\"admin\", \"root\", \"malicious36\", \"hacker\", \"test\", \"guest\"]}, \"password\": \"password123\"}",
"label": 1
},
{
"text": "{\"user\": {\"$in\": [\"user\", \"admin\", \"guest\", \"test\", \"hacker\", \"malicious37\"]}, \"password\": \"admin123\"}",
"label": 1
},
{
"text": "{\"$and\": [{\"username\": \"guest\"}, {\"isAdmin\": false}] }",
"label": 0
},
{
"text": "{\"$and\": [{\"username\": \"test\"}, {\"isAdmin\": true}] }",
"label": 0
},
{
"text": "{\"user\": {\"$size\": 11}, \"password\": \"benignpassword\"}",
"label": 0
},
{
"text": "{\"user\": {\"$size\": 12}, \"password\": \"benignpassword\"}",
"label": 0
},
{
"text": "{\"username\": {\"$regex\": \"^(benign28|benign29)\\\\d+\"}, \"isAdmin\": true}",
"label": 0
},
{
"text": "{\"username\": {\"$regex\": \"^(benign30|benign31)\\\\d+\"}, \"isAdmin\": true}",
"label": 0
},
{
"text": "{\"user\": {\"$gt\": \"user\"}, \"password\": \"benignpassword\"}",
"label": 0
},
{
"text": "{\"user\": {\"$gt\": \"guest\"}, \"password\": \"benignpassword\"}",
"label": 0
},
{
"text": "{\"$or\": [{\"username\": \"admin1\"}, {\"isAdmin\": false}]}",
"label": 0
},
{
"text": "{\"$or\": [{\"username\": \"Admin123\"}, {\"isAdmin\": false}]}",
"label": 0
},
{
"text": "{\"user\": \"benign34\", \"password\": {\"$ne\": \"benignpassword\"}}",
"label": 0
},
{
"text": "{\"user\": \"benign35\", \"password\": {\"$ne\": \"benignpassword\"}}",
"label": 0
},
{
"text": "{\"user\": {\"$in\": [\"admin\", \"root\", \"benign36\", \"hacker\", \"test\", \"guest\"]}, \"password\": \"benignpassword\"}",
"label": 0
},
{
"text": "{\"user\": {\"$in\": [\"user\", \"admin\", \"guest\", \"test\", \"hacker\", \"Admin123\"]}, \"password\": \"benignpassword\"}",
"label": 0
},
{
"text": "{\"$or\": [{},{\"foo\":\"1\"}]}",
"label": 1
},
{
"text": "{\"$where\":  \"return true\"}",
"label": 1
},
{
"text": "{\"$in\": []}",
"label": 1
}
]